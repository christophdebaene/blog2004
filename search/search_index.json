{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"aspnet-resource-kit/","title":"ASP.NET Resource Kit","text":"<p>The ASP.NET Resource Kit is a nice bundle of tutorials, tools and free controls for any developer starting ASP.NET. It can be downloaded here (about 134MB). Go and get it!</p>"},{"location":"xaml-for-net-framework-11/","title":"XAML for .NET Framework 1.1","text":"<p>Today you see a lot of XAML-like implementations for .NET framework 1.1. XAML (pronounced \"Zamel\") is part of AVALON in Longhorn and it allows you to describe the layout of applications. Basically, you describe via XAML-tags your controls, events, etc. it's very intuitive.</p> <p>One of the projects is wfml. You can find the article with the source code here.</p> <p>Another project which is still in beta is xamlon. Closer to the release date Xamlon will be licensed per developer.</p> <p>An implementation under the BSD License is MyXaml\u00a0and it is increasingly successful. I think I will first play around with this implementation. An article from the author of MyXaml can be found on CodeProject</p> <p>I think the developers who first implemented the concept were ic#code. They setup a library XmlForms which can be downloaded here and is used in SharpDevelop.</p>"},{"location":"cebit-2004/","title":"CeBIT 2004","text":"<p>This weekend I visited CeBIT 2004 at Hannover and as usual there was a lot to see. It was a trip of about 450 KM but we had no traffic problems, although there were a lot of road works. We slept in the hotel Montana Lauenau which was perfectly in order and was on the road to Hannover. Finding parking at CeBIT was far from easy, practically all parkings where full but we did find one for only 5 euro for the whole day!</p> <p>One of the things I have seen a lot at CeBIT were usb-sticks (one seen of 1GB) and mp3 players in all kinds of formats and capacity. An original idea was Lubic where you can create your own PC case with components, like you do with Lego. It goes from an Airplane to a Giraffe, for example:</p> <p></p> <p>SOHOTANK Stackable External Box from the company Stardom was exacly what I was searching for. It has a very nice design and it's easily expandable. They offer also RAID solutions!</p>","tags":["events"]},{"location":"sqlcheck/","title":"SQLcheck","text":"<p>Idera's SQLcheck quickly investigates, organizes and explains critical information about your server\u2019s hardware, operating system and SQL Server. With SQLcheck's performance dashboard, you can quickly view detailed explanations and receive recovery suggestions. Get the information you need to efficiently manage your SQL Server environment.</p> <p></p> <p>Best of all it's FREE and it can be used as a screensaver!</p>","tags":["utils-tools"]},{"location":"limitation-of-xmlserializer/","title":"Limitation of XMLSerializer","text":"<p>In a distributed application I created a project (facade) where all business logic reside. I wrote a <code>ConfigSettings</code> class where all configuration settings reside, like for example the connectionstring. These settings are fetched from an XML file through the <code>XMLSerializer</code> from .NET. To enforce layer abstraction I changed the protection level of the <code>ConfigSettings</code> class to <code>internal</code>.</p> <p>But when I try to deserialize the xml I get an <code>InvalidOperationException</code> I was a little bit surprised that apparently the <code>XMLSerializer</code> can only (de)serialize public classes_!!! After changing the protection level to <code>public</code> everything works fine, but there goes my abstraction (of course you can write your own implementation)</p>","tags":["net-sdk"]},{"location":"assemblytovisio--visio-2003-uml-diagram-generator/","title":"AssemblyToVisio \u2013 Visio 2003 UML diagram generator","text":"<p>Now you don't need anymore the architect edition of Visio to generate your UML diagrams from an assembly. Now you can use\u00a0Assembly2Visio\u00a0from GotDotNet.</p> <p>It has the extra feature that you can use regular expressions to filter class names and its totally integrated in Visio 2003 through a macro. Nice tool!</p>","tags":["utils-tools"]},{"location":"razortoolbox/","title":"RazorToolbox","text":"<p>RazorToolbox is a set of utilities/tools in the form of addins, macros, components, etc. for Visual Studio.NET. In the initial release of RazorToolbox we have ComponentDropper.</p> <p>In .NET you can easily build components (= also controls), but in order to use them on your designer surface you have to add them in the toolbox of Visual Studio.NET. But there are some problems. For example if you are writing an exe-application and added some components in the exe-project, you cannot add them to the toolbox, because the toolbox only accepts DLLs. Another issue is when you are developing a set of components in a control library, you will have to refresh the toolbox for each component you added in the library, it is not automatically refreshed and is time-consuming. Besides that there are some controls in .NET that are not displayed in the toolbox, for example the PropertyGrid.</p> <p>ComponentDropper allows you to drop a component on the designer surface from a set of assemblies. For example if you are writing an exe-application and added a usercontrol named UserControl1 like the screennshot below:</p> <p></p> <p>Take the ComponentDropper from the toolbox and drag it over the form where you want to drop <code>UserControl1</code>. You get something like:</p> <p></p> <p>This list gives the set of components that reside in the current project and the assemblies that are referenced in the project. There you can double-click on <code>UserControl1</code> and it's added to the form.</p> <p>There are some settings, like you can first build the project before ComponentDropper search for components in the current project. Also you can indicate that ComponentDropper searches in the list of references in the current project. A list of references can be excluded through expressions, for example: <code>System.\\*_</code>.</p> <p></p> <p>Download: RazorToolbox.zip</p> <p>Any feedback and comments are greatly appreciated!</p>"},{"location":"cruisecontrolnet/","title":"CruiseControl.NET","text":"<p>CruiseControl.NET is a continuous integration tool we have set up for our current project. It automatically builds when there is a change in source control (VSS, CVS, ClearCase, etc), and it reports it in a nice web layout with all the build, nunit, fxcop results.</p> <p>There is also a nice tray application that can be installed on the developers pc's which indicates the status of the builds, for example it becomes:</p> <ul> <li>green: build is successfull</li> <li>yellow: server is currently building</li> <li>red: build is failed</li> <li>gray: server is unavailable</li> </ul> <p>It's always a moment of truth when checking in code and hoping that the tray application remains green :-)</p> <p>We use NAnt as build tool and NUnit for unit testing. The only thing to pay attention for is that for example deleted files in VSS remains in the working directory and therefore still be included by NAnt. Therefore we setup a small integration server where VSS, Microsoft.NET SDK 1.1 and CruiseControl.NET is installed. The build script that is called by CruiseControl.NET does basically the following tasks:</p> <ul> <li>delete all source files</li> <li>get latest version of sources</li> <li>get latest version of buildscripts</li> <li>build the sources</li> <li>test the binaries</li> </ul> <p>(buildscripts, NAnt and NUnit are stored in VSS)</p> <p>NAnt can do operations on VSS if you download NAntContrib, there you have a set of additional tasks like 'vssget', 'vsslabel', etc. Note that it is a real advantage of storing your buildscripts in VSS so that CruiseControl.NET always uses the latest buildscripts.</p>"},{"location":"initial-version-of-sharpbrowser-finally/","title":"Initial version of SharpBrowser (finally)","text":"<p>The last couple of weeks I concentrated on writing SharpBrowser. It was already subscribed for a long time on Sourceforge.net, but now I finally released an initial version :-).</p> <p>The main features of the initial version, is that it is tab-based and it can be used with IE or Mozilla! SharpBrowser uses the great UI library from divil.co.uk for the menus, toolbars, docking and documents. One of the features is that you for example can choose the UI rendering, e.g.: Office2003, Everett and Whidbey.</p> <p></p> <p>In order to use Mozilla you just have to download the Mozilla 1.7 ActiveX Control and install it. If the installation is successful you will see an extra menuitem, where you can choose the browser: (left is IE, right is Mozilla)</p> <p></p> <p>Note that this is an initial release, and that there a bunch of features that must be implemented. In the following weeks I will concentrate on implementing features that are included in the standard IE and after that extra features like:</p> <ul> <li>cookie mamagement</li> <li>download management</li> <li>popup killer</li> <li>google toolbar</li> <li>view partial source</li> <li>event viewer</li> <li>manage broken links</li> <li>mouse gestures</li> <li>plugin-mechanism</li> <li>etc.</li> </ul> <p>That's why I started writing SharpBrowser, because I am convinced that you can implement a set of very usefull features for a browser that are not (yet) included in IE. I am also thinking about features for web developers, like a viewstate decoder, better support for debugging javascript, test scenarios, etc.</p> <p>This project give me also the opportunity to experiment with libraries like MyXaml, log4net, Microsoft Application Blocks, etc. For me it is important that I can learn of it, and that the project uses the right concepts, design patterns, libraries, etc. That's the reason why I distribute it in open-source so that we can share our knowledge!</p> <p>In the next couple of days I will explain some concepts that I implemented for SharpBrowser. Patterns like the visitor, command, composite, facade, etc.</p> <p>If you have any suggestions, ideas for new features, or want to share about good practices, design patterns, libraries, please let me know!</p> <p>SharpBrowser v0.5</p>"},{"location":"nice-little-trick-for-creating-typed-collections/","title":"Nice little trick for creating typed collections","text":"<p>I found somewhere in the newsgroups a nice trick for creating typed collections. In most of the cases typed collections only differ in the type they get and set.</p> <p>To make things easier we can do the following. Create an integer collection class, like below:</p> <pre><code>using System; \nusing System.Collections; \nusing ItemType = System.Int32;\n\npublic class IntCollection : CollectionBase { \n\n  public void Add(ItemType val) \n  {\n    this.List.Add(val); \n  }\n\n  public void Remove(ItemType val) \n  { \n    this.List.Remove(val); \n  }\n\n  public ItemType this[int index] \n  { \n      get { return (ItemType)this.List[index]; } \n      set { this.List[index] = value; } \n  } \n} \n</code></pre> <p>Here we use an alias named <code>ItemType</code> that denote the type that the collection must work with. If we want a collection of the class <code>Employee</code>, we simply copy/paste the <code>IntCollection</code> class and change the class name to <code>EmployeeCollection</code> and set the <code>ItemType</code> to <code>Entities.Employee</code> for example. So we have something like:</p> <pre><code>using System; \nusing System.Collections; \nusing ItemType = Entities.Employee;\n\npublic class EmployeeCollection: CollectionBase \n{ \n  public void Add(ItemType val) \n  { \n    this.List.Add(val); \n  } \n\n  public void Remove(ItemType val) \n  { \n    this.List.Remove(val); \n  } \n\n  public ItemType this[int index] \n  { \n    get { return (ItemType)this.List[index]; } \n    set { this.List[index] = value; } \n  } \n}\n</code></pre> <p>Offcourse you can use search and replace, but I found this method more elegant :-)</p>","tags":["net-sdk"]},{"location":"teched-2004-first-day/","title":"TechEd 2004, first day","text":"<p>The first opening key note was very entertaining and refreshing. There was an introduction of the team services in VS.NET, a demo with 3d-glasses on a 64-bit platform, a promising project called SkyServer.org, announce of the Express edition of VS.NET, and many other things.</p> <p>It's very well organized, everybody at TechEd receives a login where you can check your email, surf on the internet, you receive a bag with a huge set of goodies and documentation, etc.</p> <p>I just returned from a session of FABRIQ which can be downloaded on GotDotNet and it's a very nice messaging architecture that can be interesting on the project I am currently working on. So, be prepared Tom, Franco and Peter when I come back to Belgium :)</p> <p>Now we are going to eat something...</p> <p>greetz from A'dam</p>","tags":["events"]},{"location":"teched-2004-second-day/","title":"TechEd 2004, second day","text":"<p>The second day at TechEd I followed 2 sessions about ASP.NET 2.0 where the speaker demonstrated a lot of nice new controls and features. One of the features I like most (call it a feature or a bug-fix), is that the designer does NOT mess your aspx code anymore, which is a very good thing, I think it was called 'HTML preserve'. Features like, themes/skins, a tool for deploying your web application, role based management, navigation control, a bunch of login related controls (registration, login, lost your password, etc.), ...</p> <p>After that there was the Belgian Day which was very well organized and was really fun (I don't have to mention that a lot of people watched the football :)</p>","tags":["events"]},{"location":"declarative-versus-imperative-programming/","title":"Declarative versus Imperative programming","text":"<p>Marc Clifton added a nice introduction to declarative versus imperative programming.</p> <p>Imperative programming (source) Describes computation in terms of a program state and statements that change the program state. Declarative programming (source) Gives the computer a list of instructions to execute in a particular order, declarative programming describes to the computer a set of conditions and lets the computer figure out how to satisfy them</p> <p>Like Marc Clifton describes in the article, we are already using declarative techniques like resource files, config files, etc. Many libraries like FABRIQ, User Interface Process Application Block for .NET, log4net, etc. uses a XML file to describe a sort of workflow in a declarative way.</p> <p>Therefore I try to use it where possible on every project. Certainly when it comes to making forms. I just hate the generated code inside the InitializeComponent of a form/control, it is more elegant, readable and maintainable by describing it in a declarative way. For example a menubar would look like this: </p> <pre><code> &lt;MENUBARITEM Text=\"Edit\"&gt; \n &lt;MENUITEMS&gt; \n  &lt;MENUBUTTONITEM Text=\"Cut\" /&gt; \n  &lt;MENUBUTTONITEM Text=\"Copy\" /&gt; \n  &lt;MENUBUTTONITEM Text=\"Paste\" /&gt; \n  ... \n</code></pre> <p>instead of a bunch of statements that are needed for declaration, initialisation, setting properties and to composite the controls together. In this way it is also very hard to see the relationships between the objects!</p>","tags":["patterns-practices"]},{"location":"newwindow3-event-added-to-webbrowser-control-in-windows-xp-sp2/","title":"NewWindow3 event added to WebBrowser control in Windows XP SP2","text":"<p>I've seen on MSDN that the WebBrowser control has a new event in SP2, named NewWindow3 . It's an extension to the NewWindow2 event with additional info in the eventargs. The url that initiates the new window, and the url where the new window is redirecting to.</p> <p>I am pretty sure that this has something to do with the new popup blocker that will be added in Windows XP SP2.</p> <p></p>","tags":["net-sdk"]},{"location":"what-code-snippet-tool-are-you-using/","title":"What code snippet tool are you using?","text":"<p>I think one of the most popular code snippet tools is Code Library for .NET. I don't know how it's with the current version, but all previous versions I\u00a0tested were very unstable. But it really has all the features I need for a code snippet tool.</p> <p>I found some other code snippet tools named CodeKeeper.NET and SnippetBox.NET. It's surprising that the two sites are very similar, just search/replace of some text :-). Unfortunately it's not for free.</p> <p>I wonder what you guys use as code snippet tool...</p>","tags":["utils-tools"]},{"location":"need-to-dig-in-unmanaged-c/","title":"Need to dig in unmanaged C++","text":"<p>I am currently working on a project where we have to interact several applications\u00a0(COM, .NET, Linux, Java, etc.) together through a messaging system. One of the applications is a windows application that exposes an application object. In this way we can host it through .NET. The problem is that the application object doesn't expose any events; no exit, close or quit event. What I need to properly close the .NET host.</p> <p>In contrast to the Win32 SendMessage you can use system hooks to listen to events from any application. But after googling I noticed that .NET doesn't support global hooks! The only way to accomplish, is to make an unmanaged C++ DLL that catches the system hooks, and the .NET DLL will receive them. An example of that can be found on CodeProject Global System Hooks in .NET. Unfortanetly it only receives mouse and keyboard events, so I have to extend it to receive application events.</p>","tags":["net-sdk"]},{"location":"shipping-windows-forms-20-source-code/","title":"Shipping Windows Forms 2.0 Source code?","text":"<p>If it depends on Shawn Burke (Developer Division Program Manager) it must be possible to ship the Windows Forms source code and PDBs in version .NET 2.0. More information about that great idea can be found on the blog</p>","tags":["forms"]},{"location":"cebit-2005/","title":"CeBIT 2005","text":"<p>This weekend I visited CeBIT. It was a long trip due to road works and heavy rain, but it was worthwhile. There was a lot of people, but thankfully CeBIT at the Messegel\u00e4nder in Hannover has about 30 halls. In one of the first halls, there was an exclusive car from Bugatti. Surprisingly there was no pricing indicated :-)</p> <p></p> <p></p> <p>I think it was at the expo from AOpen that a couple of case-mods were shown. One of the most original one was certainly this one:</p> <p></p> <p>One of the manufactors that i didn't want to miss was Asus. For me there were 2 things that caught my attention: the new A8N SLI Premium which is the succesor of the A8N SLI Deluxe and of course a DUAL Geforce 6800 Ultra on one board. As you can see the board is huge and I don't think it will fit on every motherboard and/or case, but it's still a prototype of course.</p> <p></p> <p>One of the things I focused on, was SATA PCI-Express RAID cards because I am planning to buy one for my system. The most well known RAID card in this category at this very moment is Areca, who were present too. The card that I am planning to buy is the ARC-1220 with 8x SATA ports.</p> <p></p> <p>HighPoint showed also their latest products and in particular the RocketRaid 2320, which is an 8 channels PCI-Express to SATA II host adapter. The new products are included in the product guide that I took from the stand at CeBIT. The products they showed are listed here.</p> <p>I also went to 3Ware, and they told to me that the PCI-Express RAID cards will be released by November of this year.</p> <p>It was a long weekend, and I spent most of the time in the car but it was fun and interesting. See you at CeBIT 2006 :-)</p>","tags":["events"]},{"location":"my-raid-adventure/","title":"My RAID Adventure","text":"<p>Recently I purchased a new computer and I wanted to setup a RAID5 on 4x SATA Western Digital 200GB's. The motherboard is from Asus, the A8N SLI Deluxe which has 2 SATA controllers, the Silicon Image 3114R and NForce4. I also purchased a WD Raptor\u00a0as boot disk which is connected\u00a0to the NVRaid because it supports NCQ and the SI3114R not.</p> <p>First of all I wanted to test if my raptor was faster than a\u00a0normal 7200 rpm HD. And thankfully this was the case, it was about 10MB/s faster.</p> <p>RAPTOR 74GB </p> <p></p> <p>7200RPM 200GB </p> <p></p> <p>After that I tested some RAID (0, 1, 10) configurations on the SI3114 controller. One thing was clear, that mirroring on the SI3114 isn't optimized for reading, it's even a little bit slower than reading from a single disk. This has also been confirmed in a review (images are broken) from xbitlabs, where they also conclude that it doesn't have any optimizations for mirrored arrays, but focuses on RAID0. As you can see from the benchmarks there is no performance gain in RAID 1 (left below image) against a single disk (right up image), and RAID10 performs like a RAID0.</p> <p>RAID 1 STRIPE 64 </p> <p></p> <p>RAID 10 STRIPE 64 </p> <p></p> <p>So, the SI3114 was not an option for me. Then I looked for setting up a software raid in Windows XP. Yes indeed, you can build a RAID 5 in Windows XP after doing a little hack :-). For more information check out the article at tomshardware named Using WindowsXP to Make RAID 5 Happen.</p> <p>Here I did a benchmark with a stripe size of 0.5 (default) and 64K. As you can see this gives a\u00a0big difference.</p> <p>RAID 5 STRIPE 0.5 </p> <p></p> <p>RAID 5 STRIPE 64 </p> <p></p> <p>From the benchmarks with default stripe size I conclude that the read performance of RAID5 is about the same compared to a single disk, but the write performance is about the half of a single disk. This solution did not satisfy for me, because the performance is not what I expected, consumes CPU and I don't like the idea that I had to enable it by hacking some DLLs in Windows and there were some issues with Service Pack 2.</p> <p>Therefore I concluded to buy a PCI-Express SATA Raid controller, namely the Areca 1220. The Areca RAID controllers perform very well and include all the RAID features you need. A very detailed review with a lot of benchmarks can be found here.</p> <p>The ASUS A8N SLI Deluxe does have 2x 8xPCI-Express ports, which can be used for example for one VGA card and a RAID card, it doesn't need to be 2 VGA cards. To be sure I sended an email to Asus to ask if the Areca controller is compatible with the motherboard. The Areca stand at CeBIT told me they sended controllers to different manufactors (Asus, MSI, etc.) to test the compatibility and will update the 'Compatibility list' on the website.</p> <p>UPDATE: Until now it's not yet possible to combine for example one VGA and one RAID card in an SLI Motherboard, it's a BIOS issue. So, I hope getting more news soon :-)</p>","tags":["hardware"]},{"location":"istaysharpnet/","title":"IStaySharp.NET","text":"<p>I bought the domain name a couple of months ago but finally the site is online. The purpose of IStaySharp.NET is to provide a resource site for .NET developers (articles, faq, etc.) and to provide information on the projects I am working on.</p> <p>The two projects currently online is log4xsl which is a xsl for viewing XML files generated by log4net. Below you find an example of the output:</p> <p></p> <p>The WebBrowser library is the second project and fully embeds the webbrowser functionality of Internet Explorer and Mozilla. It also provides some extra functionality for Internet Explorer. Below you find a sampe project (top is IE and bottom is Mozilla) that can be downloaded on the site.</p> <p></p> <p>There are other projects coming and will be updated to the site. If you have any questions and/or feedback please contact me (contact mail can be found in the About menu).</p>"},{"location":"thats-what-i-call-a-hamburger/","title":"That\u2019s what I call a hamburger","text":"<p>It' s a pub located in Clearfield and it has a website. Some more pictures can be found here.</p> <p>Does such a pub exists near Belgium? Please let me know :-)</p>"},{"location":"eindelijk-urbanus-op-dvd-dutch/","title":"Eindelijk Urbanus op DVD (Dutch)","text":"<p>Velen die mij kennen weten dat ik een Urbanus fan ben, en eindelijk hebben ze de live shows van Urbanus op DVD gezet. Het heeft wel lang geduurd, maar ze hebben er nu toch direct 3 uitgegeven. Wat een aangename verrassing in de Fnac vandaag :-)</p> <p> </p> <p>Ik hoef u denk ik niet te vertellen dat ik ze meegenomen heb :-)</p>","tags":["personal"]},{"location":"upcoming-release-of-istaysharpwebbrower/","title":"Upcoming release of IStaySharp.WebBrower","text":"<p>In the course of next week I will release a new version of IStaySharp.WebBrowser. It contains new features, fixes and the set of properties and methods are made compatible with the webbrowser control in VS.NET 2005 (e.g.: EnableBack, DocumentText, ObjectForScripting, etc.).</p> <p>New Features:</p> <ul> <li>Implemented the Travel Log interface</li> <li>Easy communication between Javascript and .NET through the 'ObjectForScripting' property</li> <li>NUnit tests</li> <li>Improved model for extending the Site (IOleClientSite) of the webbrowser.</li> <li>Fixes and improved functionality for Mozilla</li> <li>Printer service for modifying header, footer and margins</li> </ul>"},{"location":"uml-reference-card/","title":"UML Reference Card","text":"<p>I don't use UML on a daily basis, therefore it is handy to have a summary of the UML diagrams. A very good quick reference of UML can be found here</p>"},{"location":"teched-amsterdam-2005--ill-be-there/","title":"TechEd Amsterdam 2005 \u2013 I\u2019ll Be There","text":"<p>I am looking forward to TechEd Amsterdam 2005. No doubt that it will be a great experience and there will be a lot of interesting seminars given.</p> <p>And do not forget to register to the BeLux Country Drink!</p> <p></p>","tags":["events"]},{"location":"cruisecontrolnet-and-visual-sourcesafe/","title":"CruiseControl.NET and Visual SourceSafe","text":"<p>One way of setting up CC.NET and VSS is that CC.NET is responsible for getting the latest version (setting the attribute autoGetSource to true of the sourcecontrol node in the ccnet.config file) or NAnt by using the vssget task of NAntContrib for compiling the sources by NAnt. I always use the csc task instead of the solution task, therefore it is necessary to have a clean version of VSS, because VSS does not automatically delete files locally that have been deleted in the VSS database.</p> <p>An alternative and better way is to set a shadow folder in VSS. A shadow folder contains a copy of the most recently checked-in version of each file in the project. This is exactly what we need for compiling the sources.</p> <p></p> <p>That way is CC.NET only using VSS for monitoring changes in the VSS database and/or labeling.</p>"},{"location":"teched-2005/","title":"TechEd 2005","text":"<p>The session 'Turn Left or Right? How to Best Design Your Web Services Interface' at TechEd was very interesting and pointed issues like versioning, contracts, interfaces, etc.</p> <p>Christian Weyer from ThinkTecture is currently building a tool called WSContractFirst (WSCF) that can generate code from a contract. Dealing with the \"Melted Cheese Effect\" is an article on MSDN about this subject and more parts will be published.</p>","tags":["events"]},{"location":"xcopy-deployment-of-com-components/","title":"XCopy deployment of COM components","text":"<p>If you are targeting Windows XP SP2 or Windows 2003 and your .NET application relies on COM components, then it is not needed anymore to register your COM components. This can be done by using manifest files. Registration-Free Activation of .NET-Based Components: A Walkthrough is an excellent article about this topic.</p>"},{"location":"domain-specific-language-dsl-for-the-gof-patterns/","title":"Domain Specific Language (DSL) for the GoF Patterns","text":"<p>With the DSL tools of VS.NET 2005 you can create your own designer integrated into VS.NET 2005 for a visual domain specific language. Clipcode has released a DSL for the Gang of Four patterns with the source code.</p> <p>Currently it provides the following patterns</p> <ul> <li>Abstract Factory</li> <li>Builder</li> <li>Factory Method</li> <li>Prototype</li> <li>Singleton</li> </ul>","tags":["patterns-practices"]},{"location":"created-a-new-dasblog-theme-called-business/","title":"Created a new dasblog theme called 'Business'","text":"<p>I updated my blog site to version 1.8 of DasBlog and created a new theme called <code>Business</code>. I will release soon a version of the theme so that you can use it for your own blog site.</p> <p>Any feedback and suggestions are welcome!</p>"},{"location":"remotinghelper-in-net-20-using-generics/","title":"RemotingHelper in .NET 2.0 (using generics)","text":"<p>RemotingHelper is a little helper class by Ingo Rammer that enables you to use interfaces to access remote objects instead of the implementation. In .NET 2.0 there are a lot of new features, and one of them are generics. Especially with the RemotingHelper we deal with types and with the <code>GetObject</code> method we can use generics to parameterize the method by type.</p> <p>In .NET 1.1 we need to write something like</p> <pre><code>ICustomerService customerService = RemotingHelper.GetObject(typeof(ICustomerService)) as ICustomerService;\n</code></pre> <p>when using generics in .NET 2.0 we can simply write</p> <pre><code>ICustomerService customerService = RemotingHelper.GetObject&lt;ICustomerService&gt;();\n</code></pre> <p>No need to cast and no <code>typeof</code> operator! Below you find a version of the <code>RemotingHelper</code> using generics</p> <pre><code>using System; \nusing System.Collections.Generic; \nusing System.Runtime.Remoting;\n\npublic class RemotingHelper { \n\n  private static bool isInit; \n  private static IDictionary&lt;Type, WellKnownClientTypeEntry&gt; wellKnownTypes;\n\n  public static T GetObject&lt;T&gt;() \n  { \n    if (!isInit) \n      InitTypeCache();\n\n    WellKnownClientTypeEntry entry = wellKnownTypes\\[typeof(T)\\];\n\n    if (entry == null) \n    { \n      throw new RemotingException(\"Type not found!\"); \n    }\n\n    return (T)Activator.GetObject(entry.ObjectType, entry.ObjectUrl); \n  }\n\n  public static void InitTypeCache() \n  { \n    isInit = true; \n    wellKnownTypes = new Dictionary&lt;Type, WellKnownClientTypeEntry&gt;();\n\n    foreach (WellKnownClientTypeEntry entry in RemotingConfiguration.GetRegisteredWellKnownClientTypes()) \n    { \n      if (entry.ObjectType == null) \n      { \n        throw new RemotingException(\"A configured type could not be found. Please check spelling\"); \n      }\n\n      wellKnownTypes.Add(entry.ObjectType, entry); \n    } \n  } \n} \n</code></pre>","tags":["net-sdk","services"]},{"location":"nullable-types-in-net-20/","title":"Nullable types in .NET 2.0","text":"<p>In .NET 1.1 you cannot assign the NULL value to a value type (e.g. int, float, etc.). There are some situations where this is needed, typically in database scenarios. In .NET 2.0 there is a new type called nullable. The nullable type implements the INullableValue interface and looks like:</p> <pre><code>public interface INullableValue \n{ \n  bool HasValue { get; } \n  object Value { get; } \n} \n</code></pre> <p>The idea is that a nullable type combines a value (Value) of the underlying type with a boolean (HasValue) null indicator. The underlying type of a nullable type must be a value type.</p> <pre><code>Nullable&lt;int&gt; x = 9;\n\nDebug.Assert(x.HasValue); \nDebug.Assert(x == 9); \nDebug.Assert(x.Value == 9); \nDebug.Assert(x.GetValueOrDefault(5) == 9);\n\nx = null; \n\nDebug.Assert(x.HasValue == false); \nDebug.Assert(x.GetValueOrDefault(5) == 5);\n</code></pre> <p>You can also use the ? type modifier to denote a nullable type.</p> <pre><code>int? y = 9; \n\nDebug.Assert(y.HasValue); \nDebug.Assert(typeof(int?) == typeof(Nullable&lt;int&gt;)); \n</code></pre> <p>In .NET 2.0 there is a new operator, called the <code>null coalescing operator</code>, ??. For example the statement <code>x ?? y</code> is <code>x</code> if <code>x</code> is not null, otherwise the result is <code>y</code>. Note that this operator also works with reference types.</p> <pre><code>int? a = null; \nint? b = 6; \n\nDebug.Assert((a ?? b) == b); \n\na = 9; \n\nDebug.Assert((a ?? b) == a); \n\nb = null; \n\nDebug.Assert((a ?? b) == a);\n</code></pre>","tags":["net-sdk"]},{"location":"real-developer-network/","title":"Real Developer Network","text":"<p>The RealDN site, a blog site where employees of Real Software share their knowledge about technology, has been updated.</p>"},{"location":"parse-versus-tryparse-in-net-20/","title":"Parse versus TryParse in .NET 2.0","text":"<p>In .NET 2.0 you will notice that every data has among others an extra method called <code>TryParse</code>. <code>TryParse</code> and <code>Parse</code> are semantically the same but differ in the way they handle errors. <code>Parse</code> method will throw an exception if it cannot convert the string, whereas the <code>TryParse</code> method returns a boolean to denote whether the conversion has been successfull or not, and returns the converted value through an <code>out</code> parameter.</p> <pre><code>int result = 0; \nbool success = true;\n\nstring badValue = \"12a45\"; \nstring goodValue = \"1245\";\n\ntry { \n  result = int.Parse(badValue); \n} \ncatch { \n  success = false; \n}\n\nDebug.Assert(success == false); \nDebug.Assert(result == 0);\n\nsuccess = true;\n\ntry { \n  result = int.Parse(goodValue); \n} \ncatch { \n  success = false; \n}\n\nDebug.Assert(success == true); \nDebug.Assert(result == 1245);\n\n// int.TryParse\n\nsuccess = int.TryParse(badValue, out result);\n\nDebug.Assert(success == false); \nDebug.Assert(result == 0);\n\nsuccess = int.TryParse(goodValue, out result);\n\nDebug.Assert(success == true); \nDebug.Assert(result == 1245);\n</code></pre> <p>The reason why the <code>TryMethod</code> is introduced, is because exceptions are expensive. On http://www.codinghorror.com/blog/archives/000358.html you find a benchmark tool and you notice that the (default) <code>Parse</code> method is a lot slower.</p> <p>One tip: For extensive use of string concatenation you use the StringBuilder class, for converting data types you apply the <code>TryParse</code> method.</p>"},{"location":"istaysharpwebbrowser-0901/","title":"IStaySharp.WebBrowser 0.9.0.1","text":"<p>I updated the IStaySharp.WebBrowser control with some bug fixes.</p> <ul> <li><code>DocumentText</code> fix in IEBrowser</li> <li>Fix of member <code>TranslateAccelerator</code> in <code>IDocHostUIHandler</code></li> <li><code>ScrollBarsEnabled</code> fix in <code>IEBrowserSiteBase</code></li> </ul> <p>More information can be found on IStaySharp.</p>"},{"location":"cube-server/","title":"Cube server","text":"<p>This year I purchased a server for persisting my data and for running applications that require intensive processing. For me it was very important to have a robust &amp; performant way\u00a0for archiving my data. Therefore I purchased a RAID card from Areca, the ARC-1120. The raid card is connected through 8 HD's of 200GB from Western Digital in RAID 5. Areca is currently one of the best RAID cards available. This page contains an extended review with benchmarks</p> <p>My initial idea was to use my current ASUS A8N-SLI Deluxe motherboard, which has 2x PCI-E Express ports, and to use one port for the RAID controller. At that time it was still not possible, but now ASUS has provided a new BIOS driver which fixes the issue. After a lot of research and certainly the many chats I had with Bruno, I decided to go for a server motherboard. This is simply the most recommended way and is more robust, uses registered memory, has PCI-X ports, dual CPU, more memory slots, etc.</p> <p>I wanted a server motherboard that contains dual CPU core support and featuring one or two PCI-E ports. This way I can easily upgrade in the future if it is necessary. Therefore I purchased the Tyan K8WE, which is an NForce Pro based server motherboard with 2x PCI Express x16 slots @full speed x16 lanes and has even a firewire connection.</p> <p>A lot of hardware components means a large case. Therefore I decided to buy the U2-UFO case from Mountainmods. It's really a case with a lot of space and most important it can contain up to 9 HD's and it's compatible with an Extended ATX motherboard.</p> <p>I am still configuring the server, but I will certainly post some benchmarks and experiences. In the mean time you can find the specs and some pictures of my server.</p> <ul> <li>U2-UFO Black Powder Coat - Original Top</li> <li>Tyan K8WE</li> <li>2 x AMD Opteron 244</li> <li>4 x OCZ 512MB DDRPC-3200 Server Series</li> <li>OCZ PowerStream 600 watt</li> <li>Areca 1120 Raid Card</li> <li>8 x Western Digital WD2000JD 150MB/s</li> <li>1 x Western Digital WD2000JS 300MB/s</li> <li>Plextor 716A CD-R &amp; DVD\u00b1R Recorder</li> <li>2 x Akasa Fan Controller AK-FC-03</li> <li>7 x ACE 120 mm Crystal Clear 2 BallBearing Special 4 Leds Blue</li> <li>2 x CoolerMaster Neon LED Fan RED 120x120mm</li> </ul> <p></p> <p></p> <p></p>","tags":["hardware"]},{"location":"new-recommended-lame-version/","title":"New recommended LAME version","text":"<p>LAME is a very popular LGPL MP3 encoder. For a long time LAME version 3.90.X was recommended, now version 3.97b has been released. This version uses the <code>-V</code> setting, with a value from 0 (highest) till 9 (lowest) quality in VBR. More details about these settings can be found here.</p> <p>Instead of lossy compressions like MP3, there are also losless codecs like FLAC (Free Losless Audio Coded). No quality is lost, but the file size is much bigger. Here are some results in applying the above settings on a regular audio cd:</p> Setting File size Remark WAV 721 MB lossless, uncompressed FLAC 405 MB losless, level 9 (highest) LAME -b 320 163 MB lossy, CBR 320, highest possible quality LAME -V 0 105 MB lossy, VBR LAME -V 0 --vbr-new 102 MB lossy, VBR but another algorithm (better quality and smaller) <p>You can assume that with the settings used here you cannot distinguish the mp3 from the original cd. A very good resource about audio, codecs and tests is Hydrogenaudio. This graph gives a nice relationship between the file size and audio quality for the LAME encoder. Between <code>V0</code> and <code>CBR320</code> setting, you see the file size increases by 50%, whereas the quality does not increase as much as that.</p>"},{"location":"istaysharpnet-updated/","title":"IStaySharp.NET updated","text":"<p>Today I published the new IStaySharp.NET. It's rewritten in ASP.NET 2.0 and hosted by WebHost4Life. I also added a new FAQ entry about coverting FILETIME and DateTime, you will encounter FILETIME when you are using COM interop.</p> <p>There is a lot of coming during the next months. So stay tuned!</p>"},{"location":"unit-testing-with-nunit-and-visual-studio-2005-msunit/","title":"Unit testing with NUnit and Visual Studio 2005 (MSUnit)","text":"<p>On my current project we are developing a windows forms application in Visual Studio 2005. We are still using CruiseControl.NET for continuous integration and unit testing, because setting up a team foundation server would give an overhead right now.</p> <p>For unit testing we like to have the nice debug and built-in features of MSUnit and the unit tests automatically tested by CruiseControl.NET through NUnit. The good thing about the two libraries, is that they work through attributes and the common <code>Assert</code> methods are the same.</p> <p>The template we use for our unit tests, looks like: </p> <pre><code>#if NUnit \n  using NUnit.Framework; \n#else \n  using Microsoft.VisualStudio.QualityTools.UnitTesting.Framework; \n#endif\n\nnamespace MyUnitTests { \n\n  [NUnit.Framework.TestFixture] \n  [Microsoft.VisualStudio.QualityTools.UnitTesting.Framework.TestClass] \n  public class MyTestClass \n  {       \n    [NUnit.Framework.Test] \n    [Microsoft.VisualStudio.QualityTools.UnitTesting.Framework.TestMethod] \n    public void MyTestMethod() \n    { \n\n    } \n  } \n} \n</code></pre> <p>We migrated our project to the new Composite UI. Yes, today a new release of the cab has been released. In the unit tests of CAB I noticed they did the same trick, but with aliases: </p> <pre><code>#if !NUNIT \n  using Microsoft.VisualStudio.TestTools.UnitTesting; \n#else \n  using NUnit.Framework; \n  using TestClass = NUnit.Framework.TestFixtureAttribute; \n  using TestMethod = NUnit.Framework.TestAttribute; \n  using TestInitialize = NUnit.Framework.SetUpAttribute; \n  using TestCleanup = NUnit.Framework.TearDownAttribute; \n#endif\n\nnamespace MyUnitTests \n{ \n  [TestClass] \n  public class MyTestClass \n  { \n    [TestMethod] \n    public void MyTestMethod() \n    { \n\n    } \n  } \n}\n</code></pre>","tags":["testing","visual-studio"]},{"location":"componentdropper/","title":"ComponentDropper","text":"<p>Today I released an add-in for Visual Studio .NET 2005 that allows you to drag components onto the designer surface. It's called ComponentDropper and you can even watch a movie to know what it does and how to use it.</p> <p></p> <p>A very good tool for screen capturing is Windows Media Encoder. It's from Microsoft and you can download it, if you have a legal version of Windows XP.</p> <p>Windows Media Encoder 9 Series is a powerful tool for content producers who want to capture audio and video content using the many innovations in Windows Media 9 Series including high-quality multichannel sound, high-definition video quality, support for mixed-mode voice and music content, and more.</p>"},{"location":"sql-code-coloring---the-microsoft-way/","title":"SQL Code Coloring - The Microsoft way","text":"<p>Some years ago on a project I needed a usercontrol for code coloring SQL statements. At that time I reused a dll library that is used inside the query analyzer of SQL server. I wrote a little article about that topic, I think it gives some useful information about COM interop in .NET.</p>"},{"location":"windows-mobile-smartphone-with-tomtom/","title":"Windows Mobile SmartPhone with TomTom","text":"<p>For a long time I was thinking about purchasing a portable GPS device and I also wanted to replace my old GSM. One of the most popular devices is TomTom Go, but I felt it would be better to integrate both into a smartphone. TomTom also has a product called TomTom Mobile 5 that allows GPS navigation on your smartphone.</p> <p>Therefore I bought the Qtek 8310 and TomTom Mobile 5 at PDAshop.be, I picked up the Navigation pack. The installation was easy, the only thing I had to do was to upgrade the TomTom software to TomTom Mobile 5.2 which can be found here, so that the software supports the Qtek 8310 which is the same as the i-mate sp5 (this must be chosen in the product upgrade). The TomTom package includes a mini-SD card which contains the TomTom software and maps that can be inserted into the smartphone.</p> <p></p> <p>I have to admit that everything works perfectly, the software is identically to the TomTom Go devices, there are no speed issues and the screen resolution is more than sufficient. Until now I didn't encounter any problems.</p> <p>The smartphone itself has many many features, one of them is:</p> <ul> <li>OS: Microsoft Windows Mobile</li> <li>Quad-band GSM/GPRS / EDGE module</li> <li>GPRS functionality</li> <li>1.3 Mega Pixels CMOS</li> <li>Mini-USB plug (Slave USB, Power In)</li> <li>Infrared IrDA SIR</li> <li>miniSD Card slot</li> <li>Bluetooth</li> <li>WiFi</li> <li>ActiveSync</li> <li>MSN Messenger, IE, etc.</li> <li>...</li> </ul> <p>And most importantly you can write .NET applications for your smartphone. If you download the Windows Mobile 5.0 SDK for Smartphone you get extra templates inside Visual Studio 2005 for writing smartphone applications.</p> <p>Update:</p> <ul> <li>Using the i-mate SP5 with Visual Studio 2005</li> <li>Alert - Security permission was insufficient to update your device</li> </ul> <p></p>"},{"location":"installing-the-windows-sdk-january-2006-ctp/","title":"Installing the Windows SDK January 2006 CTP","text":"<p>The Windows SDK - Janary 2006 CTP is available for download and can be used for developing WinFX applications (WWF, WPF &amp; WCF). This page give you the several components that are needed for developing WinFX applications, these are:</p> <ul> <li>WinFX RTC</li> <li>Visual Studio 2005 or Visual Studio 2005 Express</li> <li>Windows SDK</li> <li>[OPTIONAL] Visual Studio 2005 Extensions for WinFX</li> <li>[OPTIONAL] Visual Studio 2005 Extensions for Windows Workflow Foundation</li> </ul> <p>When I tried to install the SDK, I received the message that the user has cancelled the installation. In the config file I had the following statements:</p> <pre><code>0:03:18 vrijdag 20 januari 2006: [SDKSetup:Error] Config_Products_Configure: Configuration of Product Microsoft .NET Compact Framework 2.0 (failed): User cancelled installation. \n0:03:18 vrijdag 20 januari 2006: [SDKSetup:Info] Config_Products_Configure: End configuration of product: Microsoft .NET Compact Framework 2.\n0 0:03:18 vrijdag 20 januari 2006: [SDKSetup:Info] Config_Products_Install: End installation of product: Microsoft .NET Compact Framework 2.0 \n0:03:18 vrijdag 20 januari 2006: [SDKSetup:Error] Config_Products_Install: Windows SDK Setup (failed): Installation of the \"Microsoft .NET Compact Framework 2.0\" product has reported the following error: User cancelled installation.\n</code></pre> <p>The solution was to simply remove the <code>Microsoft .NET Compact Framework 2.0</code> from the <code>Add/Remove Programs</code> in the control panel. After that the installation was successfull.</p>"},{"location":"virtual-pc/","title":"Virtual PC","text":"<p>Here are some interesting blogs that are dedicated to Virtual PC</p> <ul> <li>VirtualMachine</li> <li>Dugie's Pensieve</li> <li>Virtual PC Guy</li> </ul> <p>There are some fundamental features in Virtual PC that you really have to look at. For example differencing disks, see HOWTO: Use Virtual PC's Differencing Disks to your Advantage and you can also compress your VHD files, see Compact Your VHD Files.</p> <p>Tip</p> <p>On several keyboard layouts and for example on a AZERTY belgian keyboard you need the Alt Gr key for the backslash square brackets, etc. Inside Virtual PC the AltGr key doesn't work, therefore you can use an alternative for the AltGr key, which is Ctrl+Alt.</p> <p>Update</p> <p>There is a hotfix now for the AltGr problem.</p>","tags":["virtualization"]},{"location":"baseline-architecture-toolkit-bat/","title":"Baseline Architecture Toolkit (BAT)","text":"<p>The patterns &amp; practices team introduces a new project, called Baseline Architecture Toolkit (BAT). It's a collection of carefully selected, designed, and integrated guidance assets which include:</p> <ul> <li>Reference Implementations</li> <li>Application Blocks (such as CAB and EntLib)</li> <li>Hands-On-Labs</li> <li>How-Tos</li> <li>Guidance Automation Packages automating common tasks</li> <li>Documentation bringing all the parts together and describing the rationale behind the key smart client design recommendations.</li> </ul> <p>The toolkit provides an effective way for architects, dev leads and developers to create high-quality baselines for their smart client applications, addressing non-trivial design and development challenges. The toolkit will provide reusable assets, guidance and examples for solving those challenges in the most common scenarios. Also, the guidance will be open and customizable, so you will be able to adjust it to your specific needs.</p> <p>There is a Smart Client Baseline Architecture Toolkit released on GotDotNet and it will be updated every 3-4 weeks and is based on the CAB.</p> <p>On Channel 9 you can find 2 casts about Smart Client BAT:</p> <ul> <li>ARCast - Smart Client Baseline Architecture Toolkit (Part 1 of 2)</li> <li>ARCast - Smart Client Baseline Architecture Toolkit (Part 2 of 2)</li> </ul>"},{"location":"applied-patterns--part-1/","title":"Applied Patterns \u2013 Part 1","text":"<p>Nowadays, is every kind of enterprise application more complex because there is the need to have much richer UI experience, integration with other systems, security, etc. Therefore it's important to have a good architecture and design of your application, so that you can better maintain and extend your application.</p> <p>In every enterprise application you have a dependency to data resources. These resources can be to a database, web service, registry, file system, etc. It's a good practice to encapsulate all these dependent resources into services, such that the consumer (caller of the service) doesn't need to know the implementation details and the origin of the data.</p> <p>That pattern is used a lot and is called a Service Gateway or Service Agent. There is a discussion on the difference between a Service Gateway that can be seen as consumer of a service and a Service Agent as a provider, but in the community both terms are used and mixed. The dependency between the consumer and the service is a contract which is typically a set of interfaces and business entities. In most cases, the service interface acts as a facade pattern, it encapsulates all subsystems underneath.</p> <p></p> <p>A typical example of a service agent is:</p> <pre><code>public interface ICustomerAgent \n{ \n  Customer GetCustomer(int customerId); \n  Order[] GetOrders(int customerId); \n} \n</code></pre> <p>Note that the interface doesn't expose any details about the underlying system (e.g. database, xml, etc.) and communication protocol (e.g. web service, remoting, etc.).</p> <p>Programming the UI of an application is typically the most difficult part and a challenge to achieve encapsulation and loose coupling. Thankfully there is for .NET 2.0 the Composite UI and the Smart Client Baseline Architecture Toolkit which guides you to an architecture for developing smart clients. Offcourse there is still the bible that every developer should read/know, it's the GoF book that describes a set of design patterns.</p> <p>One of the drawbacks of a designer like in Visual Studio.NET, is that it is so easy to drag and drop (in dutch I call it 'drag en drol') components, change some attributes and going through wizards for making your application. For prototyping and demo's this is good enough, but for real enterprise applications it's not. If you want you can write an application that has only one class (= form), named Form1.cs that includes all UI logic, business logic, data access, security, etc but that's not what we want.</p> <p>Building the UI is basically populating UI controls with data that resides in business entities. This means that for example an array of customers that must be shown in a list, means that every customer entity must be translated to a ListViewItem (if we don't use databinding). In most of the cases this logic resides in the form/usercontrol itself, but in fact it can be seen as a separated responsability for mapping a customer entity to a ListViewItem and vice versa (like in SC-BAT). This means that we can have something like:</p> <pre><code>public static class CustomerMapper \n{ \n  public static ListViewItem ToListViewItem(Customer customer) { ... } \n  public static Customer FromListViewItem(ListViewItem listViewItem) { ... } \n} \n</code></pre> <p>And in your form/usercontrol you write:</p> <pre><code>foreach (Customer customer in customers) \n  customerListView.Items.Add(CustomerMapper.ToListViewItem(customer)); \n</code></pre> <p>In every project there are some OO concepts and patterns I always try to achieve maintainability and extensibility. Making good OO designs is in my opinion a matter of experience, creativity and making abstractions. My conclusion...</p> <p>Abstract</p> <p>The art of OO programming is to define the set of responsabilities (= objects), to encapsulate and to interact them in a loosely coupled way.</p>","tags":["patterns-practices"]},{"location":"how-to-install-mediawiki-in-11-steps/","title":"How to install MediaWiki in 11 Steps","text":"<p>MediaWiki is a Wiki software licensed under GPL and written in PHP. Wiki allows users to easily add and edit content in a collaborative way. Wikipedia for example is one of the most popular Wiki's based on MediaWiki.</p> <p>Below you find the necessary steps for installing MediaWiki.</p> <ol> <li>Download &amp; install PHP 5.1.2 Installer. The installer creates a folder named <code>c\\:php</code></li> <li>Download PHP 5.1.2 zip package and extract all files in the folder <code>c\\:php</code></li> <li>Edit the <code>php.ini</code> file that resides in <code>C:\\Windows</code><ol> <li>Change the extension directory: <code>extension_dir = \"c:/php/ext/\"</code></li> <li>uncomment mysql extension: <code>extension = php_mysql.dll</code></li> </ol> </li> <li>Download &amp; install MySQL 4.1.16 (Windows (X86)).</li> <li>Create a virtual directory under IIS called <code>phpmyadmin</code> (e.g. <code>c:/inetpub/wwwroot/phpmyadmin</code>)<ol> <li>Add the entry <code>index.php</code> in the documents tab. </li> </ol> </li> <li>Download the latest phpMyAdmin and extract all files under the virtual directory of <code>phpmyadmin</code>.</li> <li>Edit the file <code>config.default.php</code> that resides in the <code>phpmyadmin</code> folder.<ol> <li>Change the root password of MySQL.</li> </ol> </li> <li>Browse to http://localhost/phpmyadmin  </li> <li>Create a virtual directory under IIS called <code>mediawiki</code> (e.g. <code>c:/inetpub/wwwroot/mediawiki</code>)<ol> <li>Add the entry <code>index.php</code> in the documents tab.</li> </ol> </li> <li>Download the latest MediaWiki and extract all files under the virtual directory of <code>mediawiki</code></li> <li>Browse to http://localhost/mediawiki &amp; Configure.<ol> <li>Add the line: <code>$wgEnableUploads = true</code> in the <code>LocalSettings.php</code> to enable uploads </li> </ol> </li> </ol> <p>Warning</p> <p>After installation you will notice that some pages give a warning, namely: <code>Undefined index: REQUEST_URI in C:InetpubwwwrootmediawikiincludesWebRequest</code>  This is a known issue and can be fixed.</p>"},{"location":"office-12-ascend-training-paris/","title":"Office 12 Ascend Training Paris","text":"<p>I followed the Office 12 Ascend training in Paris that was teached by Patrick. The training was very successful and Patrick showed a lot of interesting stuff and demo's about Office and Sharepoint. So little time, and so much to play with, but thankfully there are the O12 labs which are very useful and detailed.</p> <p>On Patrick's blog you find a group photo with the team of Paris. Here are some pictures I took during the ascend training.</p>"},{"location":"ie-7-beta-2-released/","title":"IE 7 Beta 2 released","text":"<p>Internet Explorer 7 Beta 2 has been released to the public, and can be downloaded here. I installed IE7 on a clean WinXP SP2 without any problems through VPC. My blog site and IStaySharp.NET rendered correctly with IE7.</p> <p></p> <p>The coolest feature I found, is the integrated rss reader...</p> <p></p>"},{"location":"visual-studio-2005-sp1/","title":"Visual Studio 2005 SP1","text":"<p>Microsoft announces on the msdn site that service pack 1 for Visual Studio 2005 will appear around Q3 of 2006.</p>","tags":["visual-studio"]},{"location":"syntax-highlighting-for-mediawiki/","title":"Syntax highlighting for MediaWiki","text":"<p>Here I describe how you can add syntax highlighting (C#, SQL, Javascript, etc.) in MediaWiki. In MediaWiki you can add syntax highlighting through GeSHiHighlight but I found it interesting for combining the world of PHP and .NET. For syntax highlighting in .NET I used the CodeHighlighter ASP.NET Control from Actipro Software.</p> <p>The intersection between PHP and .NET for communication are web services. Therefore I created a .NET webservice that provides the method <code>Parse</code> with the parameters <code>code</code> and <code>languagekey</code> (= C#, SQL, XMl, etc.) which returns a HTML string.</p> <pre><code>using System; \nusing System.Web; \nusing System.Web.Services; \nusing System.Text; \nusing System.Web.Services.Protocols; \nusing System.Configuration; \nusing ActiproSoftware.CodeHighlighter; \nusing ActiproSoftware.SyntaxEditor;\n\n[WebService(Namespace = \"http://tempuri.org/SyntaxHighlighting\")] \n[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)] \npublic class SyntaxHighlighting : System.Web.Services.WebService { \n\n  [WebMethod] \n  public string Parse(string code, string languageKey) \n  { \n      if (string.IsNullOrEmpty(code)) \n        return string.Empty;\n\n      SyntaxLanguage language = GetSyntaxLanguage(languageKey); \n      if (language == null) \n        throw new ApplicationException(\"LANGKEYNOTEXIST\");\n\n      CodeHighlighterEngine engine = new CodeHighlighterEngine(); \n      engine.OutliningEnabled = false; \n      return engine.GenerateHtmlInline(string.Empty, code, language); \n  }\n\n  CodeHighlighterConfiguration GetCodeHighlighterConfig() \n  { \n      CodeHighlighterConfiguration config = (CodeHighlighterConfiguration)HttpContext.Current.Cache[\"CodeHighlighterConfig\"];\n      if (config == null) \n      { \n          config = (CodeHighlighterConfiguration)ConfigurationManager.GetSection(\"codeHighlighter\"); \n          HttpContext.Current.Cache.Insert(\"CodeHighlighterConfig\", config); \n      }\n\n      return config; \n  }\n\n  SyntaxLanguage GetSyntaxLanguage(string languageKey) \n  { \n      if (string.IsNullOrEmpty(languageKey)) \n        return null;\n\n      CodeHighlighterConfiguration config = GetCodeHighlighterConfig(); \n      foreach (string key in config.LanguageConfigs.Keys) \n        if (key.ToLower() == languageKey.ToLower()) \n          return CodeHighlighter.GetLanguage(config, key);\n\n      return null; \n  } \n} \n</code></pre> <p>In MediaWiki you can extend WikiText so that for example your xml tag is recognized by the parser. This way you can extend the HTML output. In this example you would write in WikiText the following statements:</p> <pre><code>&lt;code language=\"C#\"&gt; \n  public int x = 5; \n&lt;/code&gt; \n</code></pre> <p>In the extensions folder of MediaWiki you add a file called <code>CodeHighlighting.php</code> with the following content:</p> <p><pre><code>&lt;?php\n\n$wgExtensionFunctions[] = \"wfCodeHighlightingExtension\";\n\nfunction wfCodeHighlightingExtension() \n{ \n  global $wgParser; \n  $wgParser-&gt;setHook('code', 'renderCode'); \n}\n\nfunction renderCode($input=\"\", $argv=array()) \n{ \n  $result = SyntaxHighlighting($input, $argv['language']); \n  return ' &lt;pre&gt;' . trim($result) . '&lt;/pre&gt; '; \n}\n\nfunction SyntaxHighlighting($code, $languageKey) \n{ \n  $location = 'http://localhost/SyntaxHighlightingWS/SyntaxHighlighting.asmx?wsdl'; \n  $result = $code;\n\n  try \n  { \n    $client = new SoapClient($location); \n    $arr = array(\"code\" =&gt; $code, \"languageKey\" =&gt; $languageKey); \n    $result = $client-&gt;Parse($arr)-&gt;ParseResult; \n  } \n  catch(SoapFault $exception) \n  { \n    if (strpos($exception-&gt;faultstring, \"LANGKEYNOTEXIST\") === false) \n    { \n      throw $exception; \n    } \n  } \n\n  return $result; \n} \n?&gt; \n</code></pre> Through the <code>setHook</code> method you can extend WikiText. Here the method <code>renderCode</code> is called when a XML element named 'code' is inside your WikiText. Calling a web service in PHP 5 is easy with the SoapClient object. If the language we pass does not exist, we simply return the original string.</p> <p>One more thing must be done, is to add an include in the <code>LocalSettings.php</code> in your MediaWiki folder.</p> <pre><code>include(\"extensions/CodeHighlighting.php\");\n</code></pre> <p>Finally: </p> <p></p>"},{"location":"applied-patterns--part-2/","title":"Applied Patterns \u2013 Part 2","text":"<p>Building an application and/or library usually starts with an OO design. Typically from that design you will define interfaces and implement base classes, which can be used as a starting point for building your application.</p> <p>Defining the signature of a base class is very important. More specific, the visibility (public, protected &amp; private) and purpose (virtual or not) of the methods are very important. Take for example an order-entry form based application that contains several screens for adding and updating data. Every screen will need to implement a kind of save method for persisting the changes. The very basic structure of your design can be:</p> <pre><code>public interface IDataView \n{ \n  void Save() \n}\n\npublic class DataViewBase: IDataView \n{ \n  public virtual void Save() \n  {     \n  } \n} \n</code></pre> <p>Here the intention is that for example every screen of your application need to inherit from <code>DataViewBase</code> and implement the <code>Save</code> method. The problem with this design, is that the interface is marked as virtual (see Virtuality) and is responsible for two jobs, namely that it is part of an interface and for specifying the implementation.</p> <p>A better way is to apply the Template Method design pattern, also called the\u00a0 'Hollywood principle', that is, 'Don't call us, we'll call you'. (This pattern is also used a lot throughout the .NET SDK library.)</p> <pre><code>public class DataViewBase: IDataView \n{ \n  public void Save() \n  { \n    DoSave(); \n  }\n\n  protected virtual void DoSave() \n  { \n  } \n}\n</code></pre> <p>This way you have complete control of the interface and you can easily add some logging before and after the save for example, extra checks, etc. If for example you need to implement whether a form-screen is dirty or not, you can easily plug it in as follow:</p> <pre><code>public class DataViewBase: IDataView \n{ \n  public void Save() \n  { \n      // do some checks \n      // do some logging\n\n      if (IsDirty()) \n        DoSave(); \n  }\n\n  protected virtual void DoSave() \n  {     \n  }\n\n  protected virtual bool IsDirty() \n  { \n    return true; } \n  }\n</code></pre> <p>If for example you need to extend the application such that when the screen is dirty you get a dialog box asking if you want to save or not. You can simply change the Save method without affecting the derived classes</p> <pre><code>public class DataViewBase: IDataView \n{ \n  public void Save() \n  { \n    // do some checks \n    // do some logging\n\n    if (IsDirty()) \n      if (MessageBox.Show(\"Do you want to save?\", \"Information\", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) \n      DoSave(); \n  }\n\n  protected virtual void DoSave() \n  {     \n  }\n\n  protected virtual bool IsDirty() \n  { \n    return true; \n  } \n} \n</code></pre> <p>Due to the fact that the interface and the custom implementation is separated, we can easily extend and have control of the interface. In the other case we would have a lot of code duplication and in most cases we would violate the Liskov Substitution principle.</p>","tags":["patterns-practices"]},{"location":"the-power-of-a-markup-language/","title":"The power of a markup language","text":"<p>One of the most popular markup languages is HTML. A markup language contains text and meta data about the text, such as layouts, styles, etc. Now Wiki sites are becoming\u00a0more and more popular, and most of them use a customized markup language for HTML. One of the popular wiki sites is Wikipedia and is based on MediaWiki which uses WikiText as a markup language.</p> <p>Here you find the syntax of WikiText. For example an asterix (*) is used for generating lists, the equal sign (=) can be used for sections, and there are many other constructions possible. For example templates are also possible, then contructions such as this can be made:</p> <p></p> <p>There is also an extension called Wikitex for WikiText which is based on LaTeX. Where is the time that I wrote my thesis with pdfLaTeX using the MiKTeX distribution and WinEdt as my editor, very powerfull tool! However, with WikiTex you can even describe your music notes:</p> <p></p> <p>One of the things I really like and I will certainly incorporate with MediaWiki is UMLGraph. With this library you can also describe your uml and a picture is generated for you. Examples can be found here.</p> <p></p> <p>In my opinion, it becomes more important to have markup languages for the web\u00a0(generates html, images, javascript, etc.). The big advantage is the flexibility of adding and updating the content very easily, without the need of extra tools and/or uploading images. Certainly when you have a wiki based site, where everybody can change the content.</p> <p>On every site, whether through MediaWiki, Sharepoint, DotNetNuke or something else, knowledge has to be shared, and each site has its purpose. For example, a developer site has the need for syntax highlighting, uml diagrams, etc, whereas a mathematical site has the need for writing formulas, plots, etc.</p> <p>Ithink there is a need for a new library (application block) in the .NET community similar to WikiText. A markup language for the web that can be customized, extended and that can be incorporated in each application. Wouldn't it be great that you\u00a0could write your blog through WikiText.NET? :) I think this can be a good subject for the contest.</p>"},{"location":"deckworkspace-extension-cab--prevent-drawing-controls-until-all-controls-are-initialized/","title":"DeckWorkspace extension (CAB) \u2013 Prevent drawing controls until all controls are initialized","text":"<p>CAB is an application block for building smart clients in .NET 2.0 and contains proven practices for building complex UI forms with so called SmartParts and Workspaces. The DeckWorkspace enables you to show and hide controls and SmartParts in an overlapped manner with no visible frame.</p> <p>If you switch between controls, you will notice that the controls are painted while there are initializing. During the loading you will see that there is some overlapping and it doesn't give you a professional user experience.</p> <p></p> <p>Therefore I extended the DeckWorkspace, so that the the controls are only redrawed when they are initialized. This can be done through the WM_SETREDRAW message. Note that this technique can also be used for other workspaces.</p> <pre><code>public class DeckWorkspaceEx: DeckWorkspace \n{ \n    int freezePainting = 0; \n    const int WM_SETREDRAW = 0xB;\n\n    [DllImport(\"User32\")] \n    static extern bool SendMessage(IntPtr hWnd, int msg, int wParam, int lParam);\n\n    protected void FreezePaintingOn() \n    { \n        if (IsHandleCreated &amp;&amp; this.Visible) \n        { \n            if (0 == freezePainting++) \n            { \n              SendMessage(Handle, WM_SETREDRAW, 0, 0); \n            } \n        } \n    }\n\n    protected void FreezePaintingOff() \n    { \n        if (freezePainting != 0) \n        { \n            if (0 == --freezePainting) \n            { \n              SendMessage(Handle, WM_SETREDRAW, 1, 0); \n              Invalidate(true); \n            } \n        } \n    }\n\n    protected override void OnActivate(Control smartPart) \n    { \n        FreezePaintingOn(); \n\n        try \n        { \n            base.OnActivate(smartPart); \n        } \n        finally \n        { \n            FreezePaintingOff(); \n        } \n    }\n\n    protected override void OnClose(Control smartPart) \n    { \n        FreezePaintingOn(); \n\n        try \n        { \n            base.OnClose(smartPart); \n        } \n        finally \n        { \n            FreezePaintingOff(); \n        } \n    }\n\n    protected override void OnHide(Control smartPart) \n    { \n        FreezePaintingOn(); \n\n        try \n        { \n            base.OnHide(smartPart); \n        } \n        finally \n        { \n            FreezePaintingOff(); \n        } \n    }\n\n    protected override void OnShow(Control smartPart, SmartPartInfo smartPartInfo) \n    { \n        FreezePaintingOn(); \n\n        try \n        { \n            base.OnShow(smartPart, smartPartInfo); \n        } \n        finally \n        { \n            FreezePaintingOff(); \n        } \n    } \n}\n</code></pre>","tags":["components"]},{"location":"continuous-integration-with-traffic-lights/","title":"Continuous Integration with traffic lights","text":"<p>Continuous integration is the process that continuously build, analyze and test your sources. In many cases the process is triggered when changes are notified in the version control system, like VSS, CVS, etc. Martin Fowler has a good article about continuous integration.</p> <p>In the .NET world, the most famous tool is CruiseControl.NET in combination with NAnt &amp; NUnit. Getting an e-mail or popup from CruiseControl.NET is nice when a build is broken, but notifying the build status\u00a0through traffic lights is much cooler.</p> <p>Michael Swanson integrated CC.NET with the Ambient Orb. I think that the Ambient Orb is not an option for Europe, but you can\u00a0integrate by using the\u00a0X10 home automation technology.\u00a0A good article about\u00a0integrating X10\u00a0with .NET can be found on Coding4Fun\u00a0and is called Controlling Lights with .NET.</p> <p>Here are some (other) implementations:</p> <ul> <li>Build Lights</li> <li>Pragmatic Automation</li> <li>Continuous Integration with IrBob</li> </ul> <p></p> <p>I am going for a walk this evening, and I think that tomorrow a traffic light will be missing :-D</p> <p></p>","tags":["testing"]},{"location":"wikipedia-reaches-1-million-articles/","title":"Wikipedia reaches 1 million articles","text":"<p>Wikipedia is the biggest and most famous online\u00a0encyclopedia available. They have now more than 1 million articles, and it's still growing! This page gives you an idea about the architecture and the specification of the servers. The master database, called Samuel, contains all articles and has about a capacity of 400GB. Here you can monitor the wiki servers.</p>"},{"location":"use-the-graphics-processing-unit-gpu-inside-your-application/","title":"Use the Graphics Processing Unit (GPU) inside your application","text":"<p>Modern GPUs are increasing in programmability and these chips can do more than just graphical computations. They can now be used as a coprocessor, and they can be integrated for a set of tasks. GPGPU (General-Purpose compuation on GPUs) is such an initiative\u00a0that contains a catalog where the GPU can be used for general-purpose computation.</p> <p>The big challenge, is to translate the everyday applications to two-dimensional graphic functions, like texture mapping. In other words: Pretend that everything is a game (source).</p> <p>As an example in this article and results, a quicksort algorithm of 18 million records in Visual C++ took 21 seconds, while the GPU took 2 seconds! What are the results for a\u00a0Quad SLI setup?</p> <p>Microsoft research is apparently working on a system that simplifies the programming of GPU to general-purpose tasks, it's called Accelerator (simplified programming of graphics processing units for general-purpose uses via data-parallelism).</p>"},{"location":"exception-handling/","title":"Exception Handling","text":"<p>When reviewing code, you see a lot of 'bad' use of exception handling. As Pieter Gheysens mentioned, you see a lot of code that looks like:</p> <pre><code>try \n{ \n    // code statements \n} \ncatch(Exception exc) \n{ \n    throw exc; \n} \n</code></pre> <p>No extra logic defined inside the catch-block, like logging, and when it is meant to re-throw an exception, the <code>throw</code> statement must be used, instead of <code>throw ex</code>. The statement <code>throw ex</code> will erase the original stacktrace. Best practice for exception handling is</p> <pre><code>try \n{ \n    // code that could throw an exception \n} \ncatch(Exception exc) \n{ \n    // log exception throw; \n}\n</code></pre> <p>In case of a traditional layered architecture, UI, Business Logic (BL) &amp; Data Access Logic (DAL), you will catch a DAL exception inside the BL layer, and translate it to a 'meaningfull' business exception. Each layer has a specific purpose and domain, and so are the exceptions!</p> <p>It's also a good idea to subscribe to the <code>Application.ThreadException</code> (in case of a form application) and do the logging in there. Here log4net is used as logging tool.</p> <pre><code>ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);\n\nApplication.ThreadException += new System.Threading.ThreadExceptionEventHandler(Application\\_ThreadException);\n\nstatic void Application_ThreadException(object sender, System.Threading.ThreadExceptionEventArgs e) \n{ \n    log.Error(\"Application error\", e.Exception); \n    // show custom error dialog or throw \n}\n</code></pre>"},{"location":"new-lcd-monitor/","title":"New LCD Monitor","text":"<p>Recently I have a new LCD monitor, the Samsung 204B. It's a 20.1 inch LCD monitor, with a resolution of 1600 x 1200 and a response time of 5 ms.</p> <p>I am freak when it comes to monitors. I like to have a high resolution and the quality of the screen must be perfect. My\u00a0current monitor is a\u00a0Sony F520\u00a0(CRT), which is very expensive, but it has a resolution of 2048 x 1536@86Hz and a pitch of 0.22mm. Therefore I was afraid about the quality of the Samsung 204B compared with my CRT monitor.</p> <p>In one word, the quality is superb of the Samsung. The colors are vivid and the text is very clear (no ghosting or blur). No dead pixels found, has an ergonomic 4-way adjustable stand and I like the design very much. One more detail, it's about 50 pounds (23 kg) lighter than my current CRT monitor :)</p> <p></p>","tags":["hardware"]},{"location":"new-domain/","title":"New domain","text":"<p>I registered a new domain for my weblog. The new domain is www.delarou.net. Please update your rss feeds to http://www.delarou.net/weblog/SyndicationService.asmx/GetRss.</p>"},{"location":"new-release-of-mediawiki/","title":"New release of MediaWiki","text":"<p>I am planning to install MediaWiki for my site www.istaysharp.net. This way I can easily add/update content, because currently the site is static, and that's thre reason why it's not updated frequently.</p> <p>It was planned for this evening to update www.istaysharp.net, but a new version has been released of MediaWiki, version 1.6.1. I hope the upgrade will go smooth and that my code will still work :)</p> <p>One other interesting point, is that apparently there is an experimental support for connecting to an Oracle database (read release notes). Are there any plans for supporting MS SQL Server 2000? If so, please let me know!!!</p>"},{"location":"come-to-wwwistaysharpnet/","title":"Come to www.istaysharp.net","text":"<p>Finally I have updated my site, called IStaySharp to MediaWiki. MediaWiki is one of the best wiki based engines available and it's written in PHP and MySQL. Thankfully my hosting, webhost4life, has PHP &amp; MySQL support.</p> <p>The intention of IStaySharp is to document and archive my code snippets, articles, components, projects, etc. that I am working on, and to share my experiences that I encounter during my .NET development. Visitors to the site can use the discussion page to give feedback, remarks, suggestions, etc. to the associated page.</p> <p>I didn't encounter much problems when installing MediaWiki on webhost4life, except the e-mailing didn't work directly. The problem was that MediaWiki uses the format: <code>myname &lt;myname@domain.com&gt;(mailto:myname@domain.com&gt;)</code> in the <code>to</code> field of the mail function, and with the current settings and setup of webhost4life this resulted in an invalid address. Therefore I had to change the method <code>toString()</code> of the <code>MailAddress</code> class inside <code>UserMailer.php</code> to</p> <pre><code>function toString() \n{ \n    return $this-&gt;address; \n} \n</code></pre> <p>instead of</p> <pre><code>function toString() \n{ \n    if( $this-&gt;name != '' ) \n    { \n        return wfQuotedPrintable( $this-&gt;name ) . \" &lt;\" . $this-&gt;address . \"&gt;\"; \n    } \n    else \n    { \n        return $this-&gt;address; \n    } \n} \n</code></pre> <p>IStaySharp uses also the extension that I wrote for having syntax highlighting. Some other nice extensions are coming!</p>"},{"location":"web-service-factory/","title":"Web Service Factory","text":"<p>The Service Factory is a cohesive collection of various forms of guidance that have been build with the primary goal of helping you build high quality connected solutions in a more consistent way with less effort.</p> <p>Check it out: http://practices.gotdotnet.com/projects/svcfactory</p>"},{"location":"extending-webbrowsersitebase/","title":"Extending WebBrowserSiteBase?","text":"<p>One of the ways for extending the WebBrowser 2.0 control is to inherit from WebBrowserSiteBase. According to the documentation, you have to override the method CreateWebBrowserSiteBase and return your specific implementation of WebBrowserSiteBase.</p> <p>Everything is there to plug-in your implementation of WebBrowserSiteBase, but the problem is that the constructor of WebBrowserSiteBase is marked as internal, and so there is no way to inherit from. I am pretty sure that it was possible with the beta release of .NET 2.0, but for some reason they marked it as internal in the\u00a0RTM version. This means that implementing some interfaces that are described here are not possible.</p> <p>I am planning to release a .NET 2005 version of my IStaySharp.WebBrowser project. More info coming soon.</p>"},{"location":"bindinglistview---the-dataview-equivalent-for-custom-collections/","title":"BindingListView - The DataView equivalent for custom collections","text":"<p>BindingListView is a project hosted on GotDotNet that gives you search, sorting and filtering capabilities to a plain BindingList. For example if you have the following Person entity:</p> <pre><code>public class Person \n{ \n    string firstName = string.Empty; \n    int age = 0;\n\n    public string FirstName \n    { \n        get { return firstName; } \n        set { firstName = value; } \n    }\n\n    public int Age \n    { \n        get { return age; } \n        set { age = value; } \n    }\n\n    public Person(string firstName, int age) \n    { \n        this.firstName = firstName; \n        this.age = age; } \n    }\n}\n</code></pre> <p>And you want to have a collection of persons bind to a datagrid, you can simply write the following:</p> <pre><code>BindingList&lt;Person&gt; persons = new BindingList&lt;Person&gt;(); \npersons.Add(new Person(\"Bill\", 45)); \npersons.Add(new Person(\"Gert\", 33)); \npersons.Add(new Person(\"Johan\", 12)); \npersons.Add(new Person(\"An\", 27));\n\npersonsGrid.DataSource = persons;\n</code></pre> <p>What if you need to do some filtering, or simply sorting on the datagrid? Therefore you would need to create a custom collection class that implements a bunch of interfaces for having sorting, filtering and searching capabilities.</p> <p>The BindingListView class has all these functionalities built-in. You simply have to pass a list, and bind the BindingListView to the datagrid. The same way you would do with a DataSet and DataView. This means:</p> <pre><code>BindingListView&lt;Person&gt; personsView = new BindingListView&lt;Person&gt;(persons); \npersonsGrid.DataSource = personsView;\n</code></pre> <p>Sorting on a <code>BindingListView</code> is done through the <code>Sort</code> property, the same as on a DataView. For example:</p> <pre><code>personsView.Sort = \"FirstName\";\n</code></pre> <p>Filtering is done through the <code>Filter</code> property and uses anonymous delegates. So for example to filter all persons that are less than 30, you can write:</p> <pre><code>personsView.Filter = BindingListView&lt;Person&gt;.CreateItemFilter(\n    new Predicate&lt;Person&gt;(delegate(Person person) \n        {\n            return (person.Age &lt; 30); \n        } \n    ));\n</code></pre> <p>You can also merge multiple sources to one view (functionality that the DataView doesn't support) through the <code>AggregatedBindingListView</code>.</p>"},{"location":"office-2007-beta-2-released/","title":"Office 2007 Beta 2 Released","text":"<p>That's right, a public preview of\u00a0Office 2007 Beta 2 is available. You can download the bits from here. Note that right now it is very difficult to connect to the server, due to high traffic.</p>"},{"location":"a-new-home/","title":"A new home","text":"<p>It has been quiet for some time on my blog, but that will change now. It was mainly due to the fact that we bought a new house in Hombeek, we didn't know that little village before :). Every weekend we spend time on painting and some chores. But the fact that we moved now, and that practically everything is done, I can again spend more time for programming and sharing with the community.</p>"},{"location":"dasblog-19-released/","title":"DasBlog 1.9 released","text":"<p>DasBlog 1.9 is released. It's a major update with a lot of extra features and fixes. I contributed to this release for improving DasBlog in a multi-user setup. The following features has been added (will update the documentation on dasblog.info):</p> <ul> <li>Top Posters macro &amp; Profile Combo control</li> <li>Every admin/contributor can create/edit\u00a0a personal profile page</li> <li>A Contributor can be notified by\u00a0mail\u00a0for certain events\u00a0and can be configured through the 'User Settings' screen<ul> <li>Notify when a new post has been added</li> <li>Notify when comments has been added for ALL posts</li> <li>Notify when comments has been added for OWN posts</li> </ul> </li> </ul> <p>I also created a new theme called 'business', which is running on my weblog now. It's not yet included in this release, but it's available through the subversion repository. I am also planning to create a theme, based on 'business', for in a multi-user setup.</p> <p>Soon I will update RealDN (corporate blog of my company I am working for) to DasBlog 1.9.</p>"},{"location":"ubuntu-on-virtual-pc/","title":"Ubuntu on Virtual PC","text":"<p>Ubuntu is a free linux-based operating system. Ubuntu works very well on Virtual PC, and I didn't encounter any problems during installation. A detailed step-by-step explanation can be found on the documentation site of Ubuntu, How To - Configure Ubuntu for Microsoft Virtual PC 2004.</p> <p>Setting Ubuntu to the same screen resolution as the host in full-screen mode didn't worked for me. I tried the following post, but without any success.</p> <p>One of the reasons for installing Ubuntu, was to see if my blog site rendered correctly in Firefox. Only the line under the post title was not positioned correctly. I will update the <code>business</code> theme soon.</p>","tags":["virtualization"]},{"location":"create-your-own-web-server/","title":"Create your own web server","text":"<p>Cassini is a ASP.NET sample application that shows how to write a web server using .NET. This means that you can host ASP.NET using the ASP.NET hosting APIs (System.Web.Hosting). This is really an alternative to IIS. There is also a second project called UltiDev Cassini Web Server which is based on the Cassini source with the following additional features:</p> <ul> <li>Comes ready for distribution with Visual Studio ASP.NET applications</li> <li>Runs as a windows service</li> <li>Hosts and runs multiple ASP.NET applications</li> <li>Provides management UI and simple API for configuring web applications</li> <li>Comes in two flavors: 2.0 version for ASP.NET 2.0 applications, and 1.1 for applications compiled for ASP.NET 1.1</li> </ul> <p>If you have the need for an offline version of your ASP.NET application, where easy deployment is required\u00a0(without IIS), then this is a very good solution.</p>"},{"location":"cruisecontrolnet-11-released/","title":"CruiseControl.NET 1.1 Released","text":"<p>A new version of CruiseControl.NET has been released. The release notes of\u00a0version 1.1 can be found here. This is the defacto standard tool if you want to continuous integration together with unit testing, code metrics, code analysis, etc.</p>"},{"location":"switched-to-greatnews-as-rss-reader/","title":"Switched to GreatNews as RSS reader","text":"<p>Recently I switched\u00a0from RSSBandit\u00a0to GreatNews as RSS reader (noticed by a post from Bert\u00a0Jansen).</p> <p>The speed for aggregating feeds using GreatNews is really fast! I think it was better called SpeedNews ;). Besides that, it has a nice user-interface and all config &amp; feed data is kept in the installation folder. This means that no installation (MSI) is required, and that it can easily be deployed to other computers.</p>","tags":["utils-tools"]},{"location":"virtual-pc-2007-beta-released/","title":"Virtual PC 2007 Beta Released","text":"<p>Microsoft released the beta program for Virtual PC 2007. The new features are</p> <ul> <li>Hardware-assisted virtualization</li> <li>Support for Windows Vista as a guest and host operating system</li> <li>Support for 64-bit host operating system</li> </ul> <p>You can participate on the beta program through the Microsoft Connect web site.</p>"},{"location":"external-harddisk-with-esata-connection/","title":"External Harddisk with eSata connection","text":"<p>Last week I bought an external harddisk, Vantec Nexstar 3 (NST-360SU-BK), that can be connected through USB 2.0 and eSata. eSata is simply a new standard for connecting external SATA drives at full speed! I use the external harddisk to share data\u00a0between my laptop (through USB 2.0) and my desktop PC (through eSata). I use extensively Virtual PC for development, and it's a good thing when developing on my desktop PC I can use the full speed of my HD.</p> <p></p>","tags":["hardware"]},{"location":"visual-studio-dslgat--how-to-load-a-dsl-model/","title":"Visual Studio DSL/GAT \u2013 How to load a DSL model","text":"<p>On IStaySharp.NET I created an article that shows you, how you can load a DSL file. This is necessary if you need to access your model from GAT, a Visual Studio AddIn, custom library, etc. The last couple of weeks I am digging into DSL and GAT for creating a set of software factories at Real Software that will be used as a baseline for building applications.</p> <p>Learning two (DSL &amp; GAT) simultaneously and combining them was not so trivial and there is some learning curve. For GAT there are some interesting resources:</p> <ul> <li>GuidanceAutomation.net</li> <li>GAT MSDN Forum</li> <li>Guidance Automation Series by Jelle Druyts</li> <li>GAT Code that is used by the P&amp;P team<ul> <li>Smart Client Software Factory</li> <li>Service Factory</li> </ul> </li> </ul> <p>The MSDN forums is a good resource when you have some issues and/or questions. DSL has also a specific forum. The capabilities of DSL are really impressive. Now you have finally the tools to write for example your own dataset designer with code generation!!!</p>","tags":["visual-studio"]},{"location":"get-running-visual-studio-instances-and-corresponding-_dte-objects/","title":"Get running Visual Studio instances and corresponding _DTE objects","text":"<p>I am currently building software factories and I needed a way to have a list of running Visual Studio instances and the corresponding EnvDTE._DTE object to manipulate the solution. Windows internally keeps a list of COM objects that are currently running, called the Running Object Table (ROT). VS .NET 2005 for example, register itself in the ROT as <code>!VisualStudio.DTE.8.0:pid</code> where <code>pid</code> is the process id of the corresponding VS 2005 instance.</p> <p>In .NET 1.1 you would use the the following UCOMIRunningObjectTable, UCOMIBindCtx for enumerating the ROT. In .NET 2.0 these interfaces are obsolete and are replaced by IRunningObjectTable and BIND_OPTS respectively. Note that the same code can be used for getting other instances like MS Word, IE, etc.</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing System.Runtime.InteropServices.ComTypes;\nusing EnvDTE;\n\npublic static class DTEHelper\n{\n    const uint S_OK = 0;\n\n    [DllImport(\"ole32.dll\")]\n    public static extern uint GetRunningObjectTable(uint reserved, out IRunningObjectTable ROT);\n\n    [DllImport(\"ole32.dll\")]\n    public static extern uint CreateBindCtx(uint reserved, out IBindCtx ctx);\n\n    static IDictionary&lt;string, object&gt; GetRunningObjectTable()\n    {                        \n        IDictionary&lt;string, object&gt; rotTable = new Dictionary&lt;string, object&gt;();\n\n        IRunningObjectTable runningObjectTable;            \n        IEnumMoniker monikerEnumerator;\n        IMoniker[] monikers = new IMoniker[1];\n\n        GetRunningObjectTable(0, out runningObjectTable);\n        runningObjectTable.EnumRunning(out monikerEnumerator);\n        monikerEnumerator.Reset();\n\n        IntPtr numberFetched = IntPtr.Zero;\n\n        while (monikerEnumerator.Next(1, monikers, numberFetched) == 0)\n        {\n            IBindCtx ctx;\n            CreateBindCtx(0, out ctx);\n\n            string runningObjectName;\n            monikers[0].GetDisplayName(ctx, null, out runningObjectName);\n            Marshal.ReleaseComObject(ctx);\n\n            object runningObjectValue;\n            runningObjectTable.GetObject(monikers[0], out runningObjectValue);\n\n            if (!rotTable.ContainsKey(runningObjectName))\n                rotTable.Add(runningObjectName, runningObjectValue);\n        }\n\n        return rotTable;\n    }\n\n    public static IDictionary&lt;string, _DTE&gt; GetRunningVSIDETable()\n    {            \n        IDictionary&lt;string, object&gt; runningObjects = GetRunningObjectTable();\n        IDictionary&lt;string, _DTE&gt; runningDTEObjects = new Dictionary&lt;string, _DTE&gt;();            \n\n        foreach (string objectName in runningObjects.Keys)\n        {\n            if (!objectName.StartsWith(\"!VisualStudio.DTE\"))\n                continue;\n\n            _DTE ide = runningObjects[objectName] as _DTE;\n            if (ide == null)\n                continue;\n\n            runningDTEObjects.Add(objectName, ide);\n        }\n\n        return runningDTEObjects;\n    }        \n}\n</code></pre>"},{"location":"web-client-software-factory-amp-compositewebui/","title":"Web Client Software Factory &amp; CompositeWebUI","text":"<p>The Microsoft Patterns &amp; Practices Team recently released a new version of the Web Client Software Factory that can be found on CodePlex. One of the things I noticed directly, is that they implemented a web version of the Composite UI based on the ObjectBuilder.</p> <p>The goals of Web Client Software Factory are:</p> <ul> <li>CAB for Web<ul> <li>Hiding complexity</li> <li>Separation of infrastructure &amp; biz logic</li> <li>Biz logic reuse amongst different UI Technologies</li> <li>Promoting consistent development practices</li> </ul> </li> <li>Navigation</li> <li>UI Richness</li> <li>UI Layout management</li> <li>State management</li> <li>Best use of technology available (Ajax, WinForms controls, ...)</li> <li>Security</li> <li>SaaS implications on application design</li> </ul> <p>More information about the vision &amp; scope can be found here.</p>"},{"location":"pimp-my-command-prompt/","title":"Pimp my command prompt","text":"<p>One of the oldest and most basic programs is certainly the command prompt (cmd.exe). One thing is certain, you still can't do without the command prompt, and certainly being a developer.\u00a0 I came across a nice tool, called Console, which enhances the command prompt. I have been using it for a couple of months now, and I really like it.</p> <p>One of the things you should really customize is your PROMPT. More information about changing the PROMPT can be found here. Having, for example, your current directory path on a separate line is really useful. You can customize it through the environment variable called PROMPT, like Scott is doing, but I prefer passing it as a parameter to the cmd.exe. This way I can easily copy the application and no reboot is required. This can be done by the /k argument of the cmd.exe.</p> <p>Here is a snippet of my XML configuration file for Console.</p> <pre><code>&lt;tab title=\"Console\"&gt;\n    &lt;console shell=\"cmd /k PROMPT $p$_$+$g\" init_dir=\"\"/&gt;\n    &lt;cursor style=\"11\" r=\"255\" g=\"255\" b=\"255\"/&gt;\n    &lt;background type=\"2\" r=\"0\" g=\"0\" b=\"0\"&gt;\n        &lt;image file=\"\" relative=\"0\" extend=\"0\" position=\"0\"&gt;\n            &lt;tint opacity=\"190\" r=\"0\" g=\"0\" b=\"0\"/&gt;\n        &lt;/image&gt;\n    &lt;/background&gt;\n&lt;/tab&gt;\n&lt;tab title=\"cmd\"&gt;\n    &lt;console shell=\"cmd.exe /k PROMPT $p$_$+$g\" init_dir=\"\"/&gt;\n    &lt;cursor style=\"11\" r=\"255\" g=\"255\" b=\"255\"/&gt;\n    &lt;background type=\"0\" r=\"0\" g=\"0\" b=\"0\"&gt;\n        &lt;image file=\"\" relative=\"0\" extend=\"0\" position=\"0\"&gt;\n            &lt;tint opacity=\"0\" r=\"0\" g=\"0\" b=\"0\"/&gt;\n        &lt;/image&gt;\n    &lt;/background&gt;\n&lt;/tab&gt;\n&lt;tab title=\"VS.NET 2005\"&gt;\n    &lt;console shell=\"cmd /k PROMPT $p$_$+$g &amp;amp;&amp;amp; C:PROGRA~1MID05A~1VCvcvarsall.bat\" init_dir=\"\"/&gt;\n    &lt;cursor style=\"0\" r=\"255\" g=\"255\" b=\"255\"/&gt;\n    &lt;background type=\"2\" r=\"0\" g=\"0\" b=\"0\"&gt;\n        &lt;image file=\"\" relative=\"0\" extend=\"0\" position=\"0\"&gt;\n            &lt;tint opacity=\"188\" r=\"0\" g=\"0\" b=\"0\"/&gt;\n        &lt;/image&gt;\n    &lt;/background&gt;\n&lt;/tab&gt;\n&lt;tab title=\"PowerShell\"&gt;\n    &lt;console shell=\"C:WINDOWSsystem32windowspowershellv1.0powershell.exe\" init_dir=\"\"/&gt;\n    &lt;cursor style=\"0\" r=\"255\" g=\"255\" b=\"255\"/&gt;\n    &lt;background type=\"2\" r=\"0\" g=\"0\" b=\"0\"&gt;\n        &lt;image file=\"\" relative=\"0\" extend=\"0\" position=\"0\"&gt;\n            &lt;tint opacity=\"189\" r=\"0\" g=\"0\" b=\"0\"/&gt;\n        &lt;/image&gt;\n    &lt;/background&gt;\n&lt;/tab&gt;\n</code></pre> <p>This is the result in Console</p> <p></p>","tags":["utils-tools"]},{"location":"powershell-10-released/","title":"PowerShell 1.0 released","text":"<p>PowerShell 1.0 has been released for Windows XP SP2 and Windows Server 2003. The bits can be downloaded here. If you already have installed a previous release of PowerShell, you need to uninstall by selecting <code>Show Updates</code> in the <code>Change or Remove Programs</code>.</p> <p></p>","tags":["components"]},{"location":"windows-desktop-search-30/","title":"Windows Desktop Search 3.0","text":"<p>I must have missed that one, but some weeks ago, version 3.0 of Windows Desktop Search for Windows XP/2003 has been released. If you need to search in netwerk files you can download Windows Desktop Search: Add-in for UNC/FAT. If you want to recognize more filetypes, check out the IFilters page on Channel9.</p>"},{"location":"visual-studio-net-macro-for-nesting-project-items/","title":"Visual Studio .NET Macro for nesting project items","text":"<p>This macro enables you to nest project items inside Visual Studio .NET. Until now, there is no easy way to nest project items through the Visual Studio IDE, you can only do it by manipulating the project (.csproj or .vbproj) file and adding the <code>DependentUpon</code> element.</p> <p></p> <p>Inside the IStaySharp.vsmacros file there is a macro called 'Create Dependency' which allows you to nest two selected items. I have even created a video to illustrate how to configure and use the macro.</p>","tags":["visual-studio"]},{"location":"new-visug-site-and-events/","title":"New VISUG site and events","text":"<p>VISUG has a brand new website.\u00a0All the necessary features are already available and more functionality is coming soon. The two last VISUG events for year 2006 are announced. One of the events is a panel discussion about exception handling and logging, and it will take place at Real Software (my home). The other event is a geek dinner where we can discuss about... you know what I mean ;).</p> <p>Topic: Discussion on Enterprise Exception Handling and Logging Description: This is a session where you (yes, you!) can discuss exception handling and logging in enterprise applications. Bring your tips and tricks, problems and exception handling frustrations with you, and we'll all learn about best practices together! No slides or preparation required! Don't want to discuss? No problem, you're not required to say anything, but we hope you will. To help with a smooth discussion, it will be lead by a panel of 3 to 4 people. If you're interested to sit on this panel, you're invited (First-come, First-served basis). When: Monday 11 December, 18:30 - 20:30 Where: Real Software (Prins Boudewijnlaan, 2550 Kontich, Route) Register: VISUG website</p> <p>See you on both events!</p>","tags":["events"]},{"location":"validation-application-block--part-of-enterprise-library-v3/","title":"Validation Application Block \u2013 Part of Enterprise Library v3","text":"<p>Tom Hollander revealed some features/scenarios about the upcoming Validation Application Block that will be included in Enterprise Library v3. There are already some validation libraries available, for example</p> <ul> <li>.net Validation Framework</li> <li>Validation Application Block (another one)</li> <li>An Object Level Validation Framework</li> </ul> <p>The fact that you can define rules through configuration is really cool. I can't wait for the CTP!</p>","tags":["components"]},{"location":"enterprise-library-30-ctp-released/","title":"Enterprise Library 3.0 CTP Released","text":"<p>That's what I call a christmas present. A CTP for Enterprise Library v3.0 has been released on CodePlex. More info can be found in this post.</p>","tags":["components"]},{"location":"validator-application-block-and-aspnet/","title":"Validator Application Block and ASP.NET","text":"<p>The Validation Application Block (VAB) of the upcoming Enterprise Library v3, uses attributes to describe validations. This gives us for example the opportunity to generate ASP.NET validators based on the attributes decorated on the properties.</p> <p>Take for example the <code>NotNullValidator</code> of VAB, this can be translated to a RequiredFieldValidator, whereas the <code>RegexValidator</code> can be translated to RegularExpressionValidator. You can go further with the <code>NotNullValidator</code> and mark required fields with a different backcolor and adding an asterix (*) to the end of the control.</p> <p>I am big fan of the DetailsView control, you can simply bind a DataSource control to it, and it will automatically provide you with a caption to each control and two-way binding. Below you find an example how you can extend the BoundField control, that investigates the <code>NotNullValidator</code> attribute of VAB. Note that I am currently extending it for the other set of validators and in a more OO way. More info will follow later.</p> <pre><code>public class BoundFieldEx : System.Web.UI.WebControls.BoundField\n{\n    public override void InitializeCell(\n        DataControlFieldCell cell, DataControlCellType cellType,\n        DataControlRowState rowState, int rowIndex)\n    {\n        base.InitializeCell(cell, cellType, rowState, rowIndex);\n\n        if ((((rowState &amp; DataControlRowState.Edit) != DataControlRowState.Normal) &amp;&amp; !this.ReadOnly) ||\n             ((rowState &amp; DataControlRowState.Insert) != DataControlRowState.Normal))\n        {\n            TextBox textBox = null;\n\n            if (cell != null &amp;&amp; cell.Controls.Count &gt; 0)\n                textBox = cell.Controls[0] as TextBox;\n\n            if (textBox != null)\n            {\n                Type dataItemType = null;\n\n                if (DataBinder.GetDataItem(base.Control) != null)\n                    dataItemType = DataBinder.GetDataItem(base.Control).GetType();\n\n                if (dataItemType != null)\n                {\n                    ValidatorAttribute attribute = IsRequired(dataItemType, base.DataField);\n\n                    if (attribute != null)\n                    {\n                        string textBoxID = this.DataField;\n                        textBox.ID = textBoxID;\n\n                        RequiredFieldValidator validator = new RequiredFieldValidator();\n                        validator.ControlToValidate = textBoxID;\n                        validator.ID = string.Concat(\"RequiredValidatorOf\", textBoxID);\n                        validator.Display = ValidatorDisplay.Dynamic;\n                        validator.ErrorMessage = attribute.MessageTemplate;\n                        cell.Controls.Add(validator);\n                    }\n                }\n            }\n        }\n    }\n\n    private ValidatorAttribute IsRequired(Type dataType, string property)\n    {\n        PropertyInfo propertyInfo = dataType.GetProperty(property);\n\n        if (propertyInfo != null)\n        {\n            foreach (Attribute attribute in propertyInfo.GetCustomAttributes(true))\n            {\n                if (attribute is NotNullValidatorAttribute)\n                    return attribute as ValidatorAttribute;\n            }\n        }\n\n        return null;\n    }\n}\n</code></pre> <p>Now you create a custom business object, called Customer, and bind it to the DetailsView through an ObjectDataSource.</p> <pre><code>public class Customer\n{\n    private string _firstName;\n    private string _lastName;\n\n    [NotNullValidator(MessageTemplate=\"Firstname cannot be empty\")]\n    public string FirstName\n    {\n        get { return _firstName; }\n        set { _firstName = value; }\n    }\n\n    [NotNullValidator(MessageTemplate=\"Lastname cannot be empty\")]\n    public string LastName\n    {\n        get { return _lastName; }\n        set { _lastName = value; }\n    }\n\n    public Customer Fill()\n    {\n        Customer customer = new Customer();\n        customer.FirstName = \"Christoph\";\n        customer.LastName = \"De Baene\";\n        return customer;\n    }\n}\n</code></pre> <p>Inside your aspx page you have something like</p> <pre><code>&lt;asp:ObjectDataSource id=\"customerDataSource\" TypeName=\"IStaySharp.Business.Customer, IStaySharp.Business\" DataObjectTypeName=\"IStaySharp.Business.Customer, IStaySharp.Business\" SelectMethod=\"Fill\" runat=\"server\"&gt;\n&lt;/asp:ObjectDataSource&gt;\n\n&lt;asp:ValidationSummary runat=\"server\"/&gt;\n\n&lt;asp:DetailsView DataSourceID=\"customerDataSource\" DefaultMode=\"Edit\" AutoGenerateRows=\"false\" runat=\"server\"&gt;\n    &lt;Fields&gt;\n        &lt;rfx:BoundField HeaderText=\"Firstname\"  DataField=\"FirstName\"/&gt;\n        &lt;rfx:BoundField HeaderText=\"Lastname\"   DataField=\"LastName\"/&gt;\n    &lt;/Fields&gt;\n&lt;/asp:DetailsView&gt;\n</code></pre> <p>Here is the result if you leave the properties empty:</p> <p></p>","tags":["asp-net"]},{"location":"virtual-pc-2007-rc1/","title":"Virtual PC 2007 RC1","text":"<p>Virtual PC 2007 RC1 has been released, and can be downloaded on the Microsoft Connect site, if you participated in the beta tests. The main new features are:</p> <ul> <li>Support for Windows Vista\u2122 as a host operating system</li> <li>Support for Windows Vista\u2122\u00a0 as a guest operating system</li> <li>Support for 64-bit host operating systems</li> <li>Support for hardware-assisted virtualization</li> <li>Built-in support for network installations</li> </ul> <p>More details about the release notes can also be downloaded on the Microsoft Connect site.</p>","tags":["virtualization"]},{"location":"web-client-software-factory-released/","title":"Web Client Software Factory Released","text":"<p>Yep, version 1.0 of the Web Client Software Factory has been released. Release 2 is expected around the end of June 2007.</p>","tags":["components"]},{"location":"visug-session-with-scott-guthrie/","title":"VISUG session with Scott Guthrie","text":"<p>Scott Guthrie is coming for a presentation on February 1st. The session will take place at Utopolis Mechelen. Please subscribe to the event through the VISUG site. Two presentations will be given, namely:</p> <ul> <li>First Look at Visual Studio and ASP.NET 'Orcas'</li> <li>ASP.NET 2.0 and ASP.NET AJAX Tips and Tricks</li> </ul> <p>See you there!</p>","tags":["events"]},{"location":"geographical-data-and-aspnet-ajax/","title":"Geographical data and ASP.NET AJAX","text":"<p>In some enterprise applications you need to show geographical data such as countries and postcodes. Most of the time you need it for a registration page, where the user need to fill in the country and postcode/area.</p> <p>Geonames is a free geographical database that contains over 8 million geographical names and it can be accessed through a number of webservices. For example the url http://ws.geonames.org/countryInfo? gives an xml with all countries, whereas the following request http://ws.geonames.org/postalCodeSearch?placename=be gives us all postcodes for a particular country (e.g. Belgium).</p> <p>Most likely you need two dropdown lists, one for countries and one for postcodes, where the postcode dropdown is dependent from the country dropdown list. This is a very good example to introduce AJAX by using the CascadingDropdown that is included in ASP.NET AJAX.</p> <p>To implement this functionality we need to implement two methods on a webservice, namely GetCountries and GetPostalCodesByCountry. The GetCountries simply returns all countries sorted by name and looks like this:</p> <pre><code>[WebMethod]\npublic CascadingDropDownNameValue[] GetCountries()\n{\n    List&lt;CascadingDropDownNameValue&gt; list = new List&lt;CascadingDropDownNameValue&gt;();\n\n    CountryItemCollection countries = IStaySharp.Geonames.GeonamesService.GetAllCountries();\n\n    for (int i = 0; i &lt; countries.Countries.Length; i++)\n    {\n        list.Add(new CascadingDropDownNameValue(\n            countries.Countries[i].CountryName,\n            countries.Countries[i].CountryCode));\n    }\n\n    list.Sort(CompareCascadingDropDownNameValueByName);\n    return list.ToArray();\n}\n</code></pre> <p>Note that the list need to be converted to an array of CascadingDropDownNameValue objects. Note that we also sort the list by implementing a delegate named <code>CompareCascadingDropDownNameValueByName</code>.</p> <pre><code>private static int CompareCascadingDropDownNameValueByName(CascadingDropDownNameValue x, CascadingDropDownNameValue y)\n{\n    if (x == null &amp;&amp; y == null)\n        return 0;\n    else if (x == null &amp;&amp; y != null)\n        return -1;\n    else if (x != null &amp;&amp; y == null)\n        return 1;\n    else\n        return x.name.CompareTo(y.name);\n}\n</code></pre> <p>The other webservice method, called <code>GetPostalCodesByCountry</code>, need to retrieve all postcodes for a particular country. The signature of the method is very strict. The parameter names must be named <code>knownCategoryValues</code> and <code>category</code>, otherwise it will fail!</p> <pre><code>[WebMethod]\npublic CascadingDropDownNameValue[] GetPostalCodesByCountry(string knownCategoryValues, string category)\n{\n    List&lt;CascadingDropDownNameValue&gt; list = new List&lt;CascadingDropDownNameValue&gt;();\n\n    StringDictionary kv = CascadingDropDown.ParseKnownCategoryValuesString(knownCategoryValues);\n\n    if (kv.ContainsKey(\"Country\"))\n    {\n        string countryName = kv[\"Country\"];\n\n        PostalCodeItemCollection postalCodes = IStaySharp.Geonames.GeonamesService.GetPostalCodes(countryName);\n\n        for (int i = 0; i &lt; postalCodes.PostalCodes.Length; i++)\n        {\n            list.Add(new CascadingDropDownNameValue(\n                string.Format(\"{0} ({1})\", postalCodes.PostalCodes[i].PostalCode, postalCodes.PostalCodes[i].Name),\n                postalCodes.PostalCodes[i].PostalCode));\n        }\n    }\n\n    list.Sort(CompareCascadingDropDownNameValueByName);\n    return list.ToArray();\n}\n</code></pre> <p>In order to complete the webservice, the attribute ScriptService (line 3) need to be included so that a client javascript proxy can be generated. You can test this by calling your webservice like this http://localhost:9999/GeonamesService.asmx/js.</p> <pre><code>[WebService(Namespace = \"http://tempuri.org/\")]\n[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]\n[System.Web.Script.Services.ScriptService()]\npublic class GeonamesService : System.Web.Services.WebService\n{\n   ...\n}\n</code></pre> <p>Finally we only need to add two CascadingDropDown controls on our aspx page with the following settings:</p> <pre><code>&lt;asp:ScriptManager ID=\"scriptManager\" runat=\"server\" /&gt;\n\n&lt;asp:DropDownList ID=\"countriesDropDown\" runat=\"server\"/&gt;\n&lt;ajaxToolkit:CascadingDropDown\n    ID=\"countriesCascadingDropDown\"        \n    TargetControlID=\"countriesDropDown\"\n    Category=\"Country\" \n    PromptText=\"Please select a country\" \n    LoadingText=\"[Loading countries...]\" \n    ServicePath=\"/GeonamesService.asmx\"\n    ServiceMethod=\"GetCountries\"\n    runat=\"server\"/&gt; \n\n&lt;br/&gt;&lt;br/&gt;\n\n&lt;asp:DropDownList ID=\"postalCodesDropDown\" runat=\"server\"/&gt;\n&lt;ajaxToolkit:CascadingDropDown\n    ID=\"postalCodesCascadingDropDown\"\n    TargetControlID=\"postalCodesDropDown\"\n    Category=\"PostalCode\" \n    PromptText=\"Please select postalcode\" \n    LoadingText=\"[Loading postalcodes...]\" \n    ServicePath=\"GeonamesService.asmx\"\n    ServiceMethod=\"GetPostalCodesByCountry\"\n    ParentControlID=\"countriesDropDown\"\n    runat=\"server\"/&gt;\n</code></pre> <p>The source code can be downloaded here: IStaySharp.AJAXSample</p>","tags":["ajax","asp-net"]},{"location":"acceptbutton-and-cancelbutton-on-a-usercontrol/","title":"AcceptButton and CancelButton on a UserControl","text":"<p>In many enterprise applications there is the need that, regardless on which control you have the focus, that you can hit the Enter and/or Esc key to perform a default action. This behaviour is also common to web applications. On the Form control you find properties like AcceptButton and CancelButton, whereas the UserControl doesn't have these properties. The code below contains an <code>AcceptButton</code> and <code>CancelButton</code> that allows you to define a default action when the Enter or Esc key is pressed respectively. </p> <pre><code>public class UserControlEx : System.Windows.Forms.UserControl\n{    \n    private Button _acceptButton;\n    private Button _cancelButton;\n\n    public event EventHandler&lt;EventArgs&gt; AcceptEvent;\n    public event EventHandler&lt;EventArgs&gt; CancelEvent;\n\n    [Browsable(true)]\n    public Button AcceptButton\n    {\n        get { return _acceptButton; }\n        set { _acceptButton = value; }\n    }\n\n    [Browsable(true)]\n    public Button CancelButton\n    {\n        get { return _cancelButton; }\n        set { _cancelButton = value; }\n    }\n\n    protected override bool ProcessCmdKey(ref Message msg, Keys keyData)\n    {\n        if (msg.WParam.ToInt32() == (int)Keys.Enter)\n        {\n            OnAcceptEvent(EventArgs.Empty);\n\n            if (_acceptButton != null)\n                _acceptButton.PerformClick();\n        }\n\n        if (msg.WParam.ToInt32() == (int)Keys.Escape)\n        {\n            OnCancelEvent(EventArgs.Empty);\n\n            if (_cancelButton != null)\n                _cancelButton.PerformClick();\n        }\n\n        return base.ProcessCmdKey(ref msg, keyData);\n    }\n\n    protected virtual void OnAcceptEvent(EventArgs args)\n    {\n        if (AcceptEvent != null)\n            AcceptEvent(this, args);\n    }\n\n    protected virtual void OnCancelEvent(EventArgs args)\n    {\n        if (CancelEvent != null)\n            CancelEvent(this, args);\n    }\n}\n</code></pre>","tags":["forms"]},{"location":"integrating-validation-application-block-of-enterprise-library-with-cslanet/","title":"Integrating Validation Application Block of Enterprise Library with CSLA.NET","text":"<p>CSLA.NET framework from Lhotka contains a lot of mechanisms for adding validations and business rules. Through CSLA.NET you can easily provide your own custom rules. Enterprise Library v3.0 now also contains a validation application block (VAB) that can be used through attributes and even from a configuration file.</p> <p>The two validation mechanisms of validation are complementary. This can be done by adding a custom rule that uses the ValidationFactory of the VAB. This means we have something like:</p> <pre><code>public class VABRules\n{\n    public class VABRuleArgs : RuleArgs\n    {\n        private string _ruleset;\n\n        public string Ruleset\n        {\n            get { return _ruleset; }\n        }\n\n\n        public VABRuleArgs(string propertyName) : this(propertyName, null)\n        {\n        }\n\n        public VABRuleArgs(string propertyName, string ruleset) : base(propertyName)\n        {\n            _ruleset = ruleset;\n        }\n    }\n\n    public static bool VABValid&lt;T&gt;(object target, RuleArgs e)\n    {\n        Validator&lt;T&gt; validator = ValidationFactory.CreateValidator&lt;T&gt;(((VABRuleArgs)e).Ruleset);\n\n        if (validator == null)\n            return true;\n\n        ValidationResults results = validator.Validate(target);\n\n        if (results == null)\n            return true;\n\n        foreach (ValidationResult result in results)\n        {\n            if (result.Key == e.PropertyName)\n            {\n                e.Description = result.Message;\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre> <p>Having the VAB rule we simply need to decorate our properties with the validation attributes of VAB and an override of the AddBusinessRules method is needed to take into account the VAB rules. For example we can define a customer business object as follow:</p> <pre><code>[Serializable()]\npublic class Customer : Csla.BusinessBase&lt;Customer&gt;\n{\n    private int _id = 0;\n    private string _firstName = string.Empty;\n    private string _email = string.Empty;\n    private int _rewardPoints;\n    private string _countryCode = string.Empty;\n\n    [Browsable(false), System.ComponentModel.DataObjectField(true, true)]\n    public int Id\n    {\n        get\n        {\n            CanReadProperty(\"Id\", true);\n            return _id;\n        }\n    }\n\n    [NotNullValidator(MessageTemplate=\"First Name may not be empty\")]\n    [StringLengthValidator(1, 60, MessageTemplate = \"First Name must be between 1 and 60 characters long\")]\n    public string FirstName\n    {\n        get\n        {\n            CanReadProperty(\"FirstName\", true);\n            return _firstName;\n        }\n        set\n        {\n            CanWriteProperty(\"FirstName\", true);\n            if (!_firstName.Equals(value))\n            {\n                _firstName = value;\n                PropertyHasChanged(\"FirstName\");\n            }\n        }\n    }\n\n    [RegexValidator(@\"w+([-+.']w+)*@w+([-.]w+)*.w+([-.]w+)*\")]\n    public string Email\n    {\n        get\n        {\n            CanReadProperty(\"Email\", true);\n            return _email;\n        }\n        set\n        {\n            CanWriteProperty(\"Email\", true);\n            if (!_email.Equals(value))\n            {\n                _email = value;\n                PropertyHasChanged(\"Email\");\n            }\n        }\n    }\n\n    [Int32RangeValidator(0, 1000000, MessageTemplate = \"Rewards points cannot exceed 1,000,000\")]\n    public int RewardPoints\n    {\n        get\n        {\n            CanReadProperty(\"RewardPoints\", true);\n            return _rewardPoints;\n        }\n        set\n        {\n            CanWriteProperty(\"RewardPoints\", true);\n            if (!_rewardPoints.Equals(value))\n            {\n                _rewardPoints = value;\n                PropertyHasChanged(\"RewardPoints\");\n            }\n        }\n    }\n\n    [NotNullValidator(MessageTemplate = \"Country may not be empty\")]\n    public string CountryCode\n    {\n        get\n        {\n            CanReadProperty(\"CountryCode\", true);\n            return _countryCode;\n        }\n        set\n        {\n            CanWriteProperty(\"CountryCode\", true);\n            if (!_countryCode.Equals(value))\n            {\n                _countryCode = value;\n                PropertyHasChanged(\"CountryCode\");\n            }\n        }\n    }\n\n    protected override object GetIdValue()\n    {\n        return _id;\n    }\n\n    protected override void AddBusinessRules()\n    {\n        ValidationRules.AddRule(VABRules.VABValid&lt;Customer&gt;, new VABRules.VABRuleArgs(\"FirstName\"));\n        ValidationRules.AddRule(VABRules.VABValid&lt;Customer&gt;, new VABRules.VABRuleArgs(\"Email\"));\n        ValidationRules.AddRule(VABRules.VABValid&lt;Customer&gt;, new VABRules.VABRuleArgs(\"RewardPoints\"));\n        ValidationRules.AddRule(VABRules.VABValid&lt;Customer&gt;, new VABRules.VABRuleArgs(\"CountryCode\"));\n    }\n}\n</code></pre>","tags":["components"]},{"location":"cebit-2007/","title":"CeBIT 2007","text":"<p>Last weekend I visited CeBIT 2007 in Hannover. We rented a house for the weekend in Steinhude which is not far from CeBIT and can easily be reached by car and train. If you are looking to stay overnight in Steinhude I would recommend this house, all comfort is available (TV, shower, kitchen, etc.).</p> <p>Like every year, there were lots of brands and new products to discover. One of the cool things at CeBIT, is that you can gather a lot of gadgets :). An eyecatcher was this modding project for the World Cyber Games 2007 which is a 200 hours project! And I found that server rack of IBM also impressive.</p> <p></p> <p>One of the things that really touched me - a trip down memory lane -, was a working Commodore 64 of the good old days. There was a room that showed some computer history.</p> <p></p> <p>If I remember correctly, I have had the following computers with which I grew up, and I have to admit, it was mainly for playing games :-)</p> <ul> <li>Atari 7800</li> <li>Sinclair QL (Quantum Leap)</li> <li>Commodore 64</li> <li>Commodore 128</li> <li>Amiga 500</li> <li>Amiga 1200</li> </ul> <p>And when I came of age, I switched to the traditional personal computer. But I must say that there is really nothing compared to those old skool arcade games, such as</p> <ul> <li>Commodore<ul> <li>International Karate +</li> <li>Green Beret</li> <li>Commando</li> <li>Ghosts'n Goblins</li> <li>Krakout</li> <li>Bruce Lee</li> <li>Aztec Challenge</li> <li>Operation Wolf</li> <li>etc.</li> </ul> </li> <li>Amiga<ul> <li>Lotus Esprit Turbo Challenge</li> <li>Shufflepuck Cafe</li> <li>Battle Squadron</li> <li>Cannon Fodder</li> <li>Lemmings</li> <li>Wings</li> <li>Rick Dangerous</li> <li>etc.</li> </ul> </li> </ul>","tags":["events"]},{"location":"linksys-wrt54gl/","title":"Linksys WRT54GL","text":"<p>Last week, I purchased a Linksys WRT54GL at RouterShop.nl. The service at Routershop.nl was really fast: at around 1:00pm I created the order and it was delivered the very next day!</p> <p>The big advantage of WRT54GL is that you can upgrade the firmware of the device. Some popular firmware's are DD-WRT, OpenWRT and Tomato. I am using Tomato, of which today a new version has been released, i.e. Tomato 1.09. Tomato has a very nice interface, many interesting features and great-looking graphs. Below you will find a nice graph concerning the bandwidth:</p> <p></p> <p>Note that you need to install the Adobe SVG Viewer in order to view the graphs.</p>","tags":["hardware"]},{"location":"reflection-and-generics/","title":"Reflection and Generics","text":"<p>On my current project I had the need to iterate through the properties of an object with reflection and to check if one of the properties is a generic List type, e.g. <code>IList</code>, <code>IList</code>, etc. To check through reflection on a generic type, you need to use the GetGenericTypeDefinition method.</p> <pre><code>foreach (PropertyInfo propertyInfo in entity.GetType().GetProperties())\n{\n   if (propertyInfo.PropertyType.IsGenericType &amp;&amp;\n       typeof(List&lt;&gt;).IsAssignableFrom\n              (propertyInfo.PropertyType.GetGenericTypeDefinition()))\n   {\n      IEnumerable enumerable = propertyInfo.GetValue(entity, null) as IEnumerable;\n      IEnumerator enumerator = enumerable.GetEnumerator();\n\n      while (enumerator.MoveNext())\n      {\n         // do something\n      }\n   }\n}\n</code></pre>","tags":["net-sdk"]},{"location":"teched-2007/","title":"TechEd 2007","text":"<p>Yesterday I arrived in Barcelona for TechEd 2007. I followed already some interesting sessions about LINQ, it brings you closer how you can access data in a more intuitive and more object-oriented way (data = objects). I really like LINQ to SQL, one of the drawbacks, is that it can only be used against a SQL Server database. If you need to target another database and program against a conceptual model (not a 1-1 mapping with your datatable structure and objects) you can have a look at LINQ to Entities.</p>","tags":["events"]},{"location":"visual-studio-2008-released/","title":"Visual Studio 2008 Released","text":"<p>Jihaaa, Visual Studio 2008 has been released on MSDN. If you want to have a nice overview of the new features in VS2008, take a look at this post from ScottGu.</p> <p>Take a look at the following downloads available for VS2008</p> <ul> <li>Visual Studio 2008 and .NET Framework 3.5 Training Kit</li> <li>Visual Studio 2008 SDK Version 1.0</li> <li>Visual C# 2008 Keybinding Reference Poster</li> <li>Microsoft Visual Studio Tools for the Microsoft Office system (version 3.0 Runtime) (x86)</li> <li>Microsoft Report Viewer Redistributable 2008</li> </ul>","tags":["visual-studio"]},{"location":"introduction-to-mymeta/","title":"Introduction to MyMeta","text":"<p>MyMeta is an open-source API that allows you to get meta-data from your database. MyMeta is part of MyGeneration, a free code generator hosted on Sourceforge. The MyMeta API can be downloaded separately here (filename is called <code>mymeta_installer.exe</code>).</p> <p>MyMeta supports the following databases. Note that the API is extensible and that you can provide your own plug-ins</p> <ul> <li>Advantage</li> <li>Delimited Text</li> <li>Firebird</li> <li>IBM DB2</li> <li>IBM iSeries (AS400)</li> <li>Interbase</li> <li>Microsoft Access</li> <li>Microsoft SQL CE</li> <li>Microsoft SQL Server</li> <li>MySQL</li> <li>MySQL2</li> <li>Oracle</li> <li>Pervasive</li> <li>PostgreSQL</li> <li>PostgreSQL 8+</li> <li>SQLite</li> <li>VistaDB</li> <li>Xsd3b (xml,xsd,uml,er)</li> </ul> <p>Below you find a code snippet that will iterate, for a SQLite database, all tables, columns and indexes.</p> <pre><code>string connectionstring = @\"data source=SQLiteDatabase.DB\";\n\nMyMeta.dbRoot myMeta = new MyMeta.dbRoot();\nmyMeta.Connect(MyMeta.dbDriver.SQLite, connectionstring);\n\nIDatabase db = myMeta.DefaultDatabase;\n\nforeach (MyMeta.ITable table in db.Tables)\n{\n    Console.WriteLine(\"{0} ({1})\", table.Name, table.Columns.Count);\n    Console.WriteLine(\"tCOLUMNS\");\n\n    foreach (MyMeta.IColumn column in table.Columns)\n    {\n        Console.WriteLine(\"tt{0} ({1}), Nullable:{2}\",\n                 column.Name, column.DataTypeName, column.IsNullable);\n    }\n\n    Console.WriteLine(\"tINDEXES\");\n\n    foreach (MyMeta.IIndex index in table.Indexes)\n    {\n        Console.WriteLine(\"tt{0}, Unique:{1}\", index.Name, index.Unique);\n    }\n}\n</code></pre> <p>MyMeta can map database types to specific ADO.NET data types and language types (C#, VB.NET, etc.). MyMeta has a set of XML files (included in the setup) that contains these mappings. Namely the <code>Languages.xml</code> and <code>DbTargets.xml</code>. Below you find a snippet of the two XML files:</p> Languages.xml<pre><code>&lt;Languages&gt;\n    ...\n    &lt;Language From=\"SQL\" To=\"C#\"&gt;\n        &lt;Type From=\"bigint\" To=\"long\" /&gt;\n        &lt;Type From=\"binary\" To=\"object\" /&gt;\n        &lt;Type From=\"bit\" To=\"bool\" /&gt;\n        &lt;Type From=\"char\" To=\"string\" /&gt;\n        &lt;Type From=\"datetime\" To=\"DateTime\" /&gt;\n        &lt;Type From=\"decimal\" To=\"decimal\" /&gt;\n        &lt;Type From=\"float\" To=\"double\" /&gt;\n        &lt;Type From=\"image\" To=\"byte[]\" /&gt;\n        &lt;Type From=\"int\" To=\"int\" /&gt;\n        &lt;Type From=\"money\" To=\"decimal\" /&gt;\n        &lt;Type From=\"nchar\" To=\"string\" /&gt;\n        &lt;Type From=\"ntext\" To=\"string\" /&gt;\n        &lt;Type From=\"numeric\" To=\"decimal\" /&gt;\n        &lt;Type From=\"nvarchar\" To=\"string\" /&gt;\n        &lt;Type From=\"real\" To=\"float\" /&gt;\n        &lt;Type From=\"smalldatetime\" To=\"DateTime\" /&gt;\n        &lt;Type From=\"smallint\" To=\"short\" /&gt;\n        &lt;Type From=\"smallmoney\" To=\"decimal\" /&gt;\n        &lt;Type From=\"text\" To=\"string\" /&gt;\n        &lt;Type From=\"timestamp\" To=\"byte[]\" /&gt;\n        &lt;Type From=\"tinyint\" To=\"byte\" /&gt;\n        &lt;Type From=\"uniqueidentifier\" To=\"Guid\" /&gt;\n        &lt;Type From=\"varbinary\" To=\"byte[]\" /&gt;\n        &lt;Type From=\"varchar\" To=\"string\" /&gt;\n        &lt;Type From=\"xml\" To=\"string\" /&gt;\n        &lt;Type From=\"sql_variant\" To=\"object\" /&gt;\n    &lt;/Language&gt;\n    ...\n    &lt;Language From=\"SQLITE\" To=\"C# (SQLite v3.x)\"&gt;\n        &lt;Type From=\"CHAR\" To=\"string\" /&gt;\n        &lt;Type From=\"DATETIME\" To=\"DateTime\" /&gt;\n        &lt;Type From=\"DATE\" To=\"DateTime\" /&gt;\n        &lt;Type From=\"TIMESTAMP\" To=\"DateTime\" /&gt;\n        &lt;Type From=\"TIME\" To=\"TimeSpan\" /&gt;\n        &lt;Type From=\"DECIMAL\" To=\"decimal\" /&gt;\n        &lt;Type From=\"VARCHAR\" To=\"string\" /&gt;\n        &lt;Type From=\"NVARCHAR\" To=\"string\" /&gt;\n        &lt;Type From=\"TEXT\" To=\"string\" /&gt;\n        &lt;Type From=\"INTEGER\" To=\"long\" /&gt;\n        &lt;Type From=\"INT\" To=\"long\" /&gt;\n        &lt;Type From=\"FLOAT\" To=\"float\" /&gt;\n        &lt;Type From=\"BOOLEAN\" To=\"bool\" /&gt;\n        &lt;Type From=\"CLOB\" To=\"string\" /&gt;\n        &lt;Type From=\"BLOB\" To=\"byte[]\" /&gt;\n        &lt;Type From=\"NUMERIC\" To=\"decimal\" /&gt;\n        &lt;Type From=\"VARYINGCHARACTER\" To=\"string\" /&gt;\n        &lt;Type From=\"NATIONALVARYINGCHARACTER\" To=\"string\" /&gt;\n    &lt;/Language&gt;\n    ...\n&lt;/Languages&gt;\n</code></pre> DBTargets.xml<pre><code>&lt;DbTargets&gt;\n    ...\n    &lt;DbTarget From=\"SQL\" To=\"SqlClient\"&gt;\n        &lt;Type From=\"bigint\" To=\"SqlDbType.BigInt\" /&gt;\n        &lt;Type From=\"binary\" To=\"SqlDbType.Binary\" /&gt;\n        &lt;Type From=\"bit\" To=\"SqlDbType.Bit\" /&gt;\n        &lt;Type From=\"char\" To=\"SqlDbType.Char\" /&gt;\n        &lt;Type From=\"datetime\" To=\"SqlDbType.DateTime\" /&gt;\n        &lt;Type From=\"decimal\" To=\"SqlDbType.Decimal\" /&gt;\n        &lt;Type From=\"float\" To=\"SqlDbType.Float\" /&gt;\n        &lt;Type From=\"image\" To=\"SqlDbType.Image\" /&gt;\n        &lt;Type From=\"int\" To=\"SqlDbType.Int\" /&gt;\n        &lt;Type From=\"money\" To=\"SqlDbType.Money\" /&gt;\n        &lt;Type From=\"nchar\" To=\"SqlDbType.NChar\" /&gt;\n        &lt;Type From=\"ntext\" To=\"SqlDbType.NText\" /&gt;\n        &lt;Type From=\"numeric\" To=\"SqlDbType.Decimal\" /&gt;\n        &lt;Type From=\"nvarchar\" To=\"SqlDbType.NVarChar\" /&gt;\n        &lt;Type From=\"real\" To=\"SqlDbType.Real\" /&gt;\n        &lt;Type From=\"smalldatetime\" To=\"SqlDbType.SmallDateTime\" /&gt;\n        &lt;Type From=\"smallint\" To=\"SqlDbType.SmallInt\" /&gt;\n        &lt;Type From=\"smallmoney\" To=\"SqlDbType.SmallMoney\" /&gt;\n        &lt;Type From=\"text\" To=\"SqlDbType.Text\" /&gt;\n        &lt;Type From=\"timestamp\" To=\"SqlDbType.Timestamp\" /&gt;\n        &lt;Type From=\"tinyint\" To=\"SqlDbType.TinyInt\" /&gt;\n        &lt;Type From=\"uniqueidentifier\" To=\"SqlDbType.UniqueIdentifier\" /&gt;\n        &lt;Type From=\"varbinary\" To=\"SqlDbType.VarBinary\" /&gt;\n        &lt;Type From=\"varchar\" To=\"SqlDbType.VarChar\" /&gt;\n        &lt;Type From=\"xml\" To=\"SqlDbType.Xml\" /&gt;\n        &lt;Type From=\"sql_variant\" To=\"SqlDbType.Variant\" /&gt;\n    &lt;/DbTarget&gt;\n    ...\n    &lt;DbTarget From=\"SQLITE\" To=\"SQLite.NET v3.x\"&gt;\n        &lt;Type From=\"CHAR\" To=\"DbType.String\" /&gt;\n        &lt;Type From=\"DATETIME\" To=\"DbType.DateTime\" /&gt;\n        &lt;Type From=\"DATE\" To=\"DbType.DateTime\" /&gt;\n        &lt;Type From=\"TIMESTAMP\" To=\"DbType.DateTime\" /&gt;\n        &lt;Type From=\"TIME\" To=\"DbType.Time\" /&gt;\n        &lt;Type From=\"DECIMAL\" To=\"DbType.Decimal\" /&gt;\n        &lt;Type From=\"VARCHAR\" To=\"DbType.String\" /&gt;\n        &lt;Type From=\"NVARCHAR\" To=\"DbType.String\" /&gt;\n        &lt;Type From=\"TEXT\" To=\"DbType.String\" /&gt;\n        &lt;Type From=\"INTEGER\" To=\"DbType.Int64\" /&gt;\n        &lt;Type From=\"INT\" To=\"DbType.Int32\" /&gt;\n        &lt;Type From=\"FLOAT\" To=\"DbType.Single\" /&gt;\n        &lt;Type From=\"BOOLEAN\" To=\"DbType.Boolean\" /&gt;\n        &lt;Type From=\"CLOB\" To=\"DbType.String\" /&gt;\n        &lt;Type From=\"BLOB\" To=\"DbType.Binary\" /&gt;\n        &lt;Type From=\"NUMERIC\" To=\"DbType.Decimal\" /&gt;\n        &lt;Type From=\"VARYINGCHARACTER\" To=\"DbType.String\" /&gt;\n        &lt;Type From=\"NATIONALVARYINGCHARACTER\" To=\"DbType.String\" /&gt;\n    &lt;/DbTarget&gt;\n    ...\n&lt;/DbTargets&gt;\n</code></pre> <p>The xml files can be loaded by setting the <code>LanguageMappingFilename</code> and <code>DbTargetMappingFilename</code>. Setting the right target can be done by the properties <code>Language</code> and <code>DbTarget</code>.</p> <pre><code>string connectionstring = @\"data source=SQLiteDatabase.DB\";\n\nMyMeta.dbRoot myMeta = new MyMeta.dbRoot();\nmyMeta.Connect(MyMeta.dbDriver.SQLite, connectionstring);\n\nmyMeta.LanguageMappingFileName = @\"C:Program FilesMyGenerationsSettingsLanguages.xml\";\nmyMeta.DbTargetMappingFileName = @\"C:Program FilesMyGenerationsSettingsDbTargets.xml\";\n\nmyMeta.Language = \"C# (SQLite v3.x)\";\nmyMeta.DbTarget = \"SQLite.NET v3.x\";\n\nIDatabase db = myMeta.DefaultDatabase;\n\nforeach (MyMeta.ITable table in db.Tables)\n{\n    Console.WriteLine(\"{0} ({1})\", table.Name, table.Columns.Count);\n    Console.WriteLine(\"tCOLUMNS\");\n\n    foreach (MyMeta.IColumn column in table.Columns)\n    {\n        Console.WriteLine(\"tt{0} ({1}), DBTargetType:{2}, LanguageType:{3}\",\n            column.Name, column.DataTypeName, column.DbTargetType, column.LanguageType);\n    }\n}\n</code></pre> <p>The mapped types can be found in the properties <code>DbTargetType</code> and <code>LanguageType</code> on the <code>IColumn</code> interface.</p>","tags":["components"]},{"location":"programmatically-creating-tables-in-sql-server-using-net-and-smo/","title":"Programmatically creating tables in SQL Server using .NET and SMO","text":"<p>SMO (SQL Server Management Objects) is a .NET based object library for programming all aspects of managing Microsoft SQL Server. Replication Management Objects (RMO) is another library that encapsulates SQL Server replication management.</p> <p>SMO assemblies are shipped with SQL Server 2005 and can be used to connect with SQL Server 7, 2000 or 2005. The assemblies are located in the following folder <code>C:\\Program Files\\Microsoft SQL Server\\90SDKAssemblies</code>.</p> <ul> <li>Microsoft.SqlServer.Smo.dll</li> <li>Microsoft.SqlServer.ConnectionInfo.dll</li> <li>Microsoft.SqlServer.SmoEnum.dll</li> <li>Microsoft.SqlServer.SqlEnum.dll</li> </ul> <p>With SMO you can do all kind of management on a SQL Server, namely: tables, columns, indexes, stored procedures, service broker, backup and restore, managing users/roles and logins, scheduling, etc. Here you can find some specific tasks that can be done with SMO.</p> <p>Below you find an example how you can create a table with SMO:</p> <pre><code>using System.Data.SqlClient;\nusing Microsoft.SqlServer.Management.Smo;\nusing Microsoft.SqlServer.Management.Common;\n\npublic class Sample\n{\n    public void Create(string connectionstring)\n    { \n        SqlConnection connection = new SqlConnection(connectionstring);\n        Server server = new Server(new ServerConnection(connection));\n\n        Database database = server.Databases[\"MyDatabase\"];\n\n        // Create table, called Customer\n        Table table = new Table(database, \"Customer\");\n\n        // Add 'ID' column which is the primary key\n        Column idColumn = new Column(table, \"ID\");\n        idColumn.DataType = DataType.Int;\n        idColumn.Identity = true;\n        idColumn.IdentitySeed = 1;\n        idColumn.IdentityIncrement = 1;\n\n        // Create a primary key index\n        Index index = new Index(table, string.Format(\"PK_{0}\", table.Name));\n        index.IndexKeyType = IndexKeyType.DriPrimaryKey;\n        index.IndexedColumns.Add(new IndexedColumn(index, \"ID\"));\n        table.Indexes.Add(index);                        \n\n        // Add 'Name' column\n        Column nameColumn = new Column(table, \"Name\");\n        nameColumn.DataType = DataType.VarChar(50);\n\n        // Add colums to table\n        table.Columns.Add(idColumn);\n        table.Columns.Add(nameColumn);\n\n        table.Create();\n    }\n}\n</code></pre>","tags":["sql-server"]},{"location":"component-dropper-v09---add-in-for-visual-studio/","title":"Component Dropper v0.9 - Add-in for Visual Studio","text":"<p>Component Dropper is a component that resides in the toolbox of VS.NET and enables you to choose a component (controls, datasets, providers, components, etc.) from the assemblies that are referenced in the current project.</p> <p>In Visual Studio .NET you can auto populate the controls in the toolbox by setting the <code>AutoToolboxPopulate</code> property to true in menu Tools -&gt; Options -&gt; Windows Forms Designer.</p> <p></p> <p>Component Dropper is an alternative way for dropping a component on the designer surface. It gives you a dialog with all the components that reside in the assemblies that are referenced in the current project. This means that it is not limited to the assemblies that reside in the current solution. This way you can easily browse and search throughout the assemblies and controls, this is very handy if you have bunch of assemblies and controls. There is never a need to refresh the toolbox, because it dynamically searches throughout the references in the current project.</p> <p></p> <p>Download: RazorToolbox</p> <p>If after installation you don't see the component dropper appearing in the toolbox, you can simply drag-and-drop the <code>IStaySharp.RazorToolbox.dll</code> to the toolbox.</p> <p>Any suggestions or remarks are welcome!</p>"},{"location":"running-a-x86-libray-on-a-x64-machine/","title":"Running a x86 libray on a x64 machine","text":"<p>In my current sample project when the runtime tried to access the MyMeta library (see following post) I always get the following FatalExecutingEngineError exception:</p> <p></p> <p>It turns out that the problem is that the MyMeta library is compiled under a x86 platform whereas the application is running on a x64 platform. In the properties settings of your visual studio project you have to set the platform target to x86! It was set to 'Any CPU', but now everything works fine.</p> <p></p>"},{"location":"edit-and-continue-not-supported-on-64-bit-target-machine/","title":"Edit and Continue not supported on 64-bit target machine","text":"<p>When trying to edit some code during debug, I received the following dialog of Visual Studio:</p> <p></p> <p>It appears that the edit and continue feature is not supported when the target is a 64-bit application. On this page you find a nice overview of the scenarios where the edit and continue features are not supported. To resolve the problem, you have to set the target to x86, which can be found in the project properties.</p> <p></p>"},{"location":"introduction-to-the-unity-application-block/","title":"Introduction to the Unity Application Block","text":"<p>The unity application block is a dependency injection container with support for constructor, property and method call injection. It simplifies the Inversion of Control (IoC) pattern and the Dependency Injection (DI) pattern. The Unity application block can be found on CodePlex.</p> <p>The unity application block has two important methods for registering types and mappings into the container, namely <code>RegisterType</code> and <code>RegisterInstance</code>.</p> Method Default Lifetime Explanation RegisterType Transient Lifetime Container will create a new instance on each call to Resolve RegisterInstance Container-controller lifetime Instance has the lifetime of the container <p>Below you find an example where we map the <code>ILogger</code> interface to <code>ConsoleLogger</code> (implements <code>ILogger</code>).</p> <pre><code>UnityContainer container = new UnityContainer();\ncontainer.RegisterType&lt;ILogger, ConsoleLogger&gt;();\nILogger logger = container.Resolve&lt;ILogger&gt;();\n</code></pre> <p>Assume you have the following class that contains a dependency to <code>ILogger</code> as a parameter on the constructor.</p> <pre><code>public class MyClass\n{\n   ILogger _logger;\n\n   public MyClass(ILogger logger)\n   {\n      _logger = logger;\n   }\n}\n</code></pre> <p>If we use the <code>Resolve</code> method of <code>UnityContainer</code> it will automatically inject the <code>ILogger</code> (<code>ConsoleLogger</code>) object. This is called constructor injection.</p> <pre><code>UnityContainer container = new UnityContainer();\ncontainer.RegisterType&lt;ILogger, ConsoleLogger&gt;();\nMyClass myClass = container.Resolve&lt;MyClass&gt;();\n</code></pre> <p>You can also map multiple types for the same interface. In that case you can use a key as a parameter.</p> <pre><code>UnityContainer container = new UnityContainer();\ncontainer.RegisterType&lt;ILogger, ConsoleLogger&gt;(\"console\");\ncontainer.RegisterType&lt;ILogger, EventLogger&gt;(\"event\");\n</code></pre> <p>If you now try to resolve <code>MyClass</code> you will get an exception, because it cannot resolve which type (<code>ConsoleLogger</code> or <code>EventLogger</code>) to use. Therefore you can use the <code>Dependency</code> attribute where you can denote a key. For example:</p> <pre><code>public class MyClass\n{\n   ILogger _logger;\n\n   public MyClass([Dependency(\"console\")] ILogger logger)\n   {\n      _logger = logger;\n   }\n}\n</code></pre> <p>Below you find an example of property injection:</p> <pre><code>public class AnotherClass\n{\n   ILogger _consoleLogger;\n   ILogger _eventLogger;\n\n   [Dependency(\"console\")]\n   public ILogger ConsoleLogger\n   {\n      get { return _consoleLogger; }\n      set { _consoleLogger = value; }\n   }\n\n   [Dependency(\"event\")]\n   public ILogger EventLogger\n   {\n      get { return _eventLogger; }\n      set { _eventLogger = value; }\n   }\n}\n</code></pre> <p>Note that you can also map and register your types through a configuration file.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n  &lt;configSections&gt;\n&lt;section name=\"unity\" type=\"Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration\" /&gt;\n  &lt;/configSections&gt;\n  &lt;unity&gt;\n    &lt;containers&gt;\n      &lt;container&gt;\n        &lt;types&gt;\n          &lt;type name=\"console\" type=\"IStaySharp.UnitySample.ILogger, IStaySharp.UnitySample\" mapTo=\"IStaySharp.UnitySample.ConsoleLogger, IStaySharp.UnitySample\" /&gt;\n          &lt;type name=\"event\" type=\"IStaySharp.UnitySample.ILogger, IStaySharp.UnitySample\" mapTo=\"IStaySharp.UnitySample.EventLogger, IStaySharp.UnitySample\" /&gt;\n        &lt;/types&gt;\n      &lt;/container&gt;\n  &lt;/containers&gt;\n  &lt;/unity&gt;\n&lt;/configuration&gt;\n</code></pre> <p>The following code shows you how to use a configuration file with <code>UnityContainer</code>.</p> <pre><code>UnityContainer container = new UnityContainer();\nUnityConfigurationSection section = (UnityConfigurationSection)ConfigurationManager.GetSection(\"unity\");\nsection.Containers.Default.GetConfigCommand().Configure(container);\n\nILogger logger = container.Resolve&lt;ILogger&gt;(\"console\");\n</code></pre>","tags":["unity"]},{"location":"sql-server-2008--rtm/","title":"SQL Server 2008  RTM","text":"<p>SQL Server 2008 is now available on MSDN and TechNet, see the announcement here. To have an overview of the new features, you can have a look here and you may download the SQL Server 2008 Books Online. Apparently has SQL Server 2008 powershell support!</p>","tags":["sql-server"]},{"location":"need-for-more-space-on-your-vhd/","title":"Need for more space on your VHD?","text":"<p>Today I needed to install extra stuff on my VPC, but it turned out that there was not enough space. Donn Felker blogged a nice article how you can resize your VHD, I followed all the steps and It worked like a charm.</p>","tags":["virtualization"]},{"location":"running-mstest-without-visual-studio--gallio-to-the-rescue/","title":"Running MSTest without Visual Studio \u2013 Gallio to the rescue","text":"<p>In some cases it can be useful to quickly run your Microsoft unit tests on a machine where Visual Studio is not installed. For example on an end-user machine and/or during acceptance testing. Microsoft unit tests have a great integration with Visual Studio and Team Foundation Server, but unfortunately the unit tests cannot be run as a standalone application.</p> <p>I saw there was an open-source adapter for NUnit, called Microsoft Team System NUnit Adapter from Exact Magic Software that can run Microsoft unit tests inside NAnt. For my unit tests I had some problems with the ExpectedException attribute. Then I noticed there is a project called Gallio and it worked like a charm and it can do a lot more! I noticed that today a new version has been released, namely Gallio v3.0.4.</p> <p>Gallio is a extensible , open and neutral test automation platform. It provides tools and services needed to run and manipulate tests written using a wide range of other frameworks. Gallio can run tests from</p> <ul> <li>MbUnit</li> <li>MSTest</li> <li>NBehave</li> <li>NUnit</li> <li>xUnit.NET</li> </ul> <p>and it can integrate with the following tools</p> <ul> <li>CCNet</li> <li>MSBuild</li> <li>NAnt</li> <li>NCover</li> <li>Pex</li> <li>Powershell</li> <li>Resharper</li> <li>TestDriven.NET</li> <li>TypeMock</li> <li>Visual Studio Team System</li> </ul> <p>To run the the tests there is a command-line runner, called \u2018Echo\u2019 and a graphical user-interface, called \u2018Icarus\u2019.</p> <p></p>","tags":["testing","visual-studio"]},{"location":"99-bottles-of-beer-in-more-then-1200-different-programming-languages/","title":"99 Bottles of Beer in more then 1200 different programming languages","text":"<p>I found a funny and interesting site called 99 Bottles of Beer. The purpose of the site is to have a wide range (&gt; 1200) of programming languages that generate the lyrics of the song 99 Bottles of Bear. Take a look at the following examples</p> <ul> <li>Commodore 64 BASIC (V2)</li> <li>Language v</li> <li>Assembler (Intel x86)</li> <li>COBOL</li> <li>Transact-SQL</li> <li>F#</li> <li>MSIL</li> <li>Turing Machine</li> <li>Scheme</li> <li>etc.</li> </ul>"},{"location":"organize-your-nhibernate-mapping-files-inside-visual-studio/","title":"Organize your NHibernate mapping files inside Visual Studio","text":"<p>NHibernate uses an xml file to describe the mapping. Typically it is embedded as a resource file inside your project and it has a consistent filename convention, namely <code>.hbm.xml</code>. Typically an NHibernate project has the following structure</p> <p></p> <p>Would it not be nice if we can organize it in the following way? I found it always handy that related classes, like designer classes and resource files are grouped together.</p> <p></p> <p>To achieve this structure we can start from the first structure and nest the xml file trough a macro that I\u2019ve written.</p> <p>The second step, is to make clear to NHibernate where the mapping files reside. Note that resources that are nested to a class are compiled differently and thus NHibernate will not recognize the mapping files anymore. Therefore we need to traverse manually the assembly and try each embedded resource file. Below you find the resulting code</p> <pre><code>var domainAssembly = typeof(MyDomain.Order).Assembly;\nNHibernate.Cfg.Configuration cfg = new NHibernate.Cfg.Configuration();\n\nforeach (var resourceName in domainAssembly.GetManifestResourceNames())\n{\n   try\n   {\n      cfg.AddResource(resourceName, domainAssembly);\n   }\n   catch (NHibernate.MappingException)\n   {\n      //ignore\n   }\n}\n</code></pre>","tags":["visual-studio"]},{"location":"visual-studio-2010-and-net-40-ctp-available/","title":"Visual Studio 2010 and .NET 4.0 CTP Available","text":"<p>With the PDC 08 going on you can download a CTP of Visual Studio 2010.</p>","tags":["visual-studio"]},{"location":"how-to-make-your-windows-live-writer-portable/","title":"How to make your Windows Live Writer portable","text":"<p>I am using Windows Live Writer for posting items to my blog. One thing that I don\u2019t like in general, is that applications store resources in the MyDocuments folder and that you cannot specify another location. I\u2019m a huge fan of portable applications, which means that they don\u2019t need any registry settings and/or dependencies, so that you can simply xcopy deploy to another location. Certainly if you are using an external HD, USB flash drive, etc.</p> <p>Windows Live Writer (WLW) stores by default the drafts in the <code>MyDocuments\\My Weblog Posts\\Drafts</code> folder. I am using the latest beta (v14.0.5025.904) of WLW and didn\u2019t find any settings through the application that enables you to customize folder paths.</p> <p>I decided to dig into the assemblies of WLW via reflector to see how it is implemented. After some investigation I found that there is a class called <code>ApplicationEnvironment</code> that reside in the WindowsLive.Writer.CoreServices assembly. The <code>Initialize</code> method looks like this</p> <p></p> <p>Apparently WLW has built-in functionality that enables you to run the application with the settings carried around with the software. WLW checks if there is a folder called \u2018UserData\u2019 in the installation folder and uses that folder to store all settings, drafts, etc. This is really great, you simply copy all contents of your WLW directory to for example your external drive and you simply create a folder called <code>UserData</code>. If you start WLW again it will create all the necessary subfolders and settings.</p> <p></p> <p>I think it\u2019s a feature of WLW beta that has not been documented yet ;-)</p>","tags":["windows-live"]},{"location":"aop-in-action---dirty-tracking-using-unity-interception/","title":"AOP in Action - Dirty Tracking using Unity Interception","text":"<p>In most enterprise applications, you end up by having a lot of cross-cutting concerns throughout your application. Most of the time, you have, for example, infrastructure code for doing logging, dirty tracking, lazy loading, caching, etc. Often infrastructure code is scattered over a number of modules making it harder to maintain and understand. Aspect-oriented programming (AOP) solves this problem by allowing the programmer to express cross-cutting concerns in stand-alone modules called aspects.</p> <p>When you apply domain-driven design, you often have the need for dirty tracking, check on a business entity whether the entity has changed (is dirty) or not. There are a lot of different implementations for dirty tracking, but in this article we are doing it by using an interface called <code>IDirty</code> that contains a property called <code>IsDirty</code> and the setter properties of your entity object calls the <code>IsDirty</code> if the value has changed.</p> <pre><code>public interface IDirty\n{\n   bool IsDirty { get; set; }\n}\n\npublic class Customer : IDirty\n{\n   private string _firstName;\n   private string _lastName;\n\n   public bool IsDirty { get; set; }\n\n   public string FirstName\n   {\n      get { return _firstName; }\n      set\n      {\n         if (value != _firstName)\n            IsDirty = true;\n         _firstName = value;\n      }\n   }\n\n   public string LastName\n   {\n      get { return _lastName; }\n      set\n      {\n         if (value != _lastName)\n        IsDirty = true;\n\n            _lastName = value;\n      }\n   }\n}\n</code></pre> <p>As you can see from the example, if you have a lot of properties, you end up by having a lot of infrastructure code and repeated code in each setter. What we want to achieve, is to annotate the setter property through an attribute called <code>DirtyAttribute</code> and that the dirty logic is centralized in one module.</p> <pre><code>[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]\npublic class DirtyAttribute : System.Attribute\n{\n}\n\npublic interface IDirty\n{\n   bool IsDirty { get; set; }\n}\n\npublic class Customer : IDirty\n{\n   public bool IsDirty { get; set; }\n\n   public virtual string FirstName { get; [Dirty] set; }\n   public virtual string LastName { get; [Dirty] set; }\n}\n</code></pre> <p>Note that these are the only dependencies needed inside your domain model project. Now we need to make clear to Unity that we need to intercept the <code>DirtyAttribute</code> and execute some logic. With unity we denote a policy, a policy contains a set of matching rules and a set of call handlers. A matching rule will denote on which point the handler must be executed and the handler is the logic. In AOP this is called respectively a pointcut and an advice, the combination of the two is called an aspect. First, we are going to create our <code>DirtyHandler</code> by implementing the <code>ICallHandler</code> that resides in the <code>Microsoft.Unity.Interception</code> assembly.</p> <pre><code>public class DirtyHandler : ICallHandler\n{\n   public int Order { get; set; }\n\n   public IMethodReturn Invoke(IMethodInvocation input, GetNextHandlerDelegate getNext)\n   {\n      Advise(input.Target, input.MethodBase, input.Arguments[0]);\n      return getNext()(input, getNext);\n   }\n\n   private void Advise(object target, MemberInfo methodInfo, object value)\n   {\n      string propertyName = methodInfo.Name.Substring(\"set_\".Length);\n      PropertyInfo info = target.GetType().GetProperty(propertyName);\n\n      if (info != null)\n      {\n         object oldValue = info.GetValue(target, null);\n\n         if (!IsEqual(value, oldValue))\n            ((IDirty)target).IsDirty = true;\n      }\n   }\n\n   private bool IsEqual(object valueX, object valueY)\n   {\n      if (valueX == null &amp;&amp; valueY != null)\n         return false;\n\n      if (valueX != null &amp;&amp; valueY == null)\n         return false;\n\n      if (valueX == null &amp;&amp; valueY == null)\n         return true;\n\n      return valueX.Equals(valueY);\n   }\n}\n</code></pre> <p>Note that in the <code>DirtyHandler</code> we did not specify when the dirty logic is executed, this is done by a set of matching rules that implement the <code>IMatchingRule</code> interface. In our case we have three criterias, first that it can only be applied to a setter property, secondly that the setter property must be annotated with the <code>DirtyAttribute</code> and finally that the class must implement the <code>IDirty</code> interface. In Unity we have predefined rules that we can use, in our case we can use the <code>PropertyMatchingRule</code> and the <code>CustomAttributeMatchingRule</code>. To detect that a particular instance implements a given type, I created the <code>InstanceOfMatchingRule</code>.</p> <pre><code>public class InstanceOfMatchingRule : IMatchingRule\n{\n   private readonly Type _type;\n\n   public InstanceOfMatchingRule(Type type)\n   {\n      _type = type;\n   }\n\n   public bool Matches(System.Reflection.MethodBase member)\n   {\n      return _type.IsAssignableFrom(member.DeclaringType);\n   }\n}\n</code></pre> <p>Now we are ready to configure our container for interception. Note that the interception mechanism inside Unity is implemented as an extension to the Unity block. Below we configure a policy named \"DirtyPolicy\" that executes the handler named \"DirtyHandler\" if it matches all three matching rules (<code>PropertyMatchingRule</code>, <code>CustomAttributeMatchingRule</code> and <code>InstanceOfMatchingRule</code>). In this example, we denote that the type <code>Customer</code> is configured with the <code>VirtualMethodInterceptor</code>. Note that this type of interception only works if your methods/properties are marked as virtual, which is the case for our <code>Customer</code> type (see <code>Customer.cs</code>).</p> <pre><code>// Start Configuration\nIUnityContainer container = new UnityContainer()\n   .AddNewExtension&lt;Interception&gt;()\n   .RegisterInstance&lt;ICallHandler&gt;(\"DirtyHandler\", new DirtyHandler());\n\ncontainer.Configure&lt;Interception&gt;()\n   .SetInterceptorFor&lt;Customer&gt;(new VirtualMethodInterceptor())\n   .AddPolicy(\"DirtyPolicy\")\n      .AddMatchingRule(new PropertyMatchingRule(\"*\", PropertyMatchingOption.Set))\n      .AddMatchingRule(new CustomAttributeMatchingRule(typeof(DirtyAttribute), true))\n      .AddMatchingRule(new InstanceOfMatchingRule(typeof(IDirty)))\n      .AddCallHandler(\"DirtyHandler\");\n// End Configuration\n\nvar customer = container.Resolve&lt;Customer&gt;();\n\nvar firstname = customer.FirstName;\nDebug.Assert(!customer.IsDirty);\ncustomer.FirstName = \"Piet\";\nDebug.Assert(customer.IsDirty);\n</code></pre> <p>The configuration part can also be done through a configuration file. Unfortunately, there is no schema available, this means that there is no validation and intellisense inside your Visual Studio! Especially to describe the matching rules through xml, I had to introduce some extra converters that implement the TypeConverter class. This enables you to convert to any kind of object started from a string. I introduced the <code>PropertyMatchingOptionConverter</code> and <code>GetTypeConverter</code>.</p> <pre><code>public class PropertyMatchingOptionConverter : System.ComponentModel.TypeConverter\n{\n   public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n   {\n      return (PropertyMatchingOption)Enum.Parse(typeof(PropertyMatchingOption), value.ToString());\n   }\n}\n\npublic class GetTypeConverter : System.ComponentModel.TypeConverter\n{\n   public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n   {\n      return Type.GetType(value.ToString());\n   }\n}\n</code></pre> <p>Below you find how you use Unity with a configuration file and you find also the resulting xml file that does exactly the same as the above-mentioned version.</p> <pre><code>IUnityContainer container = new UnityContainer();\nUnityConfigurationSection section = (UnityConfigurationSection)ConfigurationManager.GetSection(\"unity\");\nsection.Containers[\"Default\"].Configure(container);\n\nvar customer = container.Resolve&lt;Customer&gt;();\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;configuration&gt;\n  &lt;configSections&gt;\n&lt;section name=\"unity\" type=\"....UnityConfigurationSection, ...\"/&gt;\n  &lt;/configSections&gt;\n  &lt;unity&gt;\n    &lt;typeAliases&gt;\n\n      &lt;typeAlias alias=\"bool\"     type=\"System.Boolean, mscorlib\" /&gt;\n      &lt;typeAlias alias=\"string\"   type=\"System.String, mscorlib\" /&gt;\n      &lt;typeAlias alias=\"int\"      type=\"System.Int32, mscorlib\" /&gt;\n      &lt;typeAlias alias=\"Type\"     type=\"System.Type, mscorlib\" /&gt;\n\n      &lt;typeAlias alias=\"GetTypeConverter\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"PropertyMatchingOptionConverter\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"InstanceOfMatchingRule\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"DirtyHandler\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"VirtualMethodInterceptor\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"CustomAttributeMatchingRule\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"PropertyMatchingRule\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"PropertyMatchingOption\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"DirtyAttribute\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"IDirty\" type=\"...\"/&gt;\n      &lt;typeAlias alias=\"Customer\" type=\"...\"/&gt;\n\n    &lt;/typeAliases&gt;\n    &lt;containers&gt;\n      &lt;container name=\"Default\"&gt;\n        &lt;extensions&gt;\n          &lt;add type=\"....Interception, ...\"/&gt;\n        &lt;/extensions&gt;\n        &lt;extensionConfig&gt;\n          &lt;add name=\"interception\" type=\"....InterceptionConfigurationElement, ...\"&gt;\n            &lt;policies&gt;\n              &lt;policy name=\"DirtyPolicy\"&gt;\n                &lt;matchingRules&gt;\n                  &lt;matchingRule name=\"SetPropertyRule\" type=\"PropertyMatchingRule\"&gt;\n                    &lt;injection&gt;\n                      &lt;constructor&gt;\n                        &lt;param name=\"propertyName\" parameterType=\"string\"&gt;\n                          &lt;value value=\"*\"/&gt;\n                        &lt;/param&gt;\n                        &lt;param name=\"option\" parameterType=\"PropertyMatchingOption\"&gt;\n                          &lt;value value=\"Set\" type=\"PropertyMatchingOption\" typeConverter=\"PropertyMatchingOptionConverter\"/&gt;\n                        &lt;/param&gt;\n                      &lt;/constructor&gt;\n                    &lt;/injection&gt;\n                  &lt;/matchingRule&gt;\n                  &lt;matchingRule name=\"DirtyAttributeRule\" type=\"CustomAttributeMatchingRule\"&gt;\n                    &lt;injection&gt;\n                      &lt;constructor&gt;\n                        &lt;param name=\"attributeType\" parameterType=\"Type\"&gt;\n                          &lt;value value=\"...DirtyAttribute, ...\" type=\"Type\" typeConverter=\"GetTypeConverter\"/&gt;\n                        &lt;/param&gt;\n                        &lt;param name=\"inherited\" parameterType=\"bool\"&gt;\n                          &lt;value value=\"true\" type=\"bool\"/&gt;\n                        &lt;/param&gt;\n                      &lt;/constructor&gt;\n                    &lt;/injection&gt;\n                  &lt;/matchingRule&gt;\n                  &lt;matchingRule name=\"InstanceOfIDirtyRule\" type=\"InstanceOfMatchingRule\"&gt;\n                    &lt;injection&gt;\n                      &lt;constructor&gt;\n                        &lt;param name=\"type\" parameterType=\"Type\"&gt;\n                          &lt;value value=\"...IDirty, ...\" type=\"Type\" typeConverter=\"GetTypeConverter\"/&gt;\n                        &lt;/param&gt;\n                      &lt;/constructor&gt;\n                    &lt;/injection&gt;\n                  &lt;/matchingRule&gt;\n                &lt;/matchingRules&gt;\n                &lt;callHandlers&gt;\n                  &lt;callHandler name=\"DirtyHandler\" type=\"DirtyHandler\"/&gt;\n                &lt;/callHandlers&gt;\n              &lt;/policy&gt;\n            &lt;/policies&gt;\n            &lt;interceptors&gt;\n              &lt;interceptor type=\"VirtualMethodInterceptor\"&gt;\n                &lt;key type=\"Customer\"/&gt;\n              &lt;/interceptor&gt;\n            &lt;/interceptors&gt;\n          &lt;/add&gt;\n        &lt;/extensionConfig&gt;\n      &lt;/container&gt;\n    &lt;/containers&gt;\n  &lt;/unity&gt;\n&lt;/configuration&gt;\n</code></pre> <p>The source code of this article can be downloaded here</p>","tags":["patterns-practices"]},{"location":"please-remove-your-hardware-to-start-installation/","title":"Please remove your hardware to start installation!","text":"<p>Today I tried out installing Windows Server 2008 on my cube server. When I reached the dialog to choose on which partition I want to install to, I always received the following warning \"windows is unable to find a system volume that meets its criteria for installation\". The partition had enough room space (40GB), formatted in NTFS, marked as primary and boot, etc.</p> <p>After some research I ended up to the following article (KB927520). I tried a lot in the BIOS and partition settings but nothing helped. On the TechNet forum I saw the following thread with the same error and most of them solved the problem by physically unplugging all additional drives! On my cube I have an Areca RAID controller and a separated drive for booting the system. Unplugging my raid controller was the solution, duh!</p>","tags":["hardware"]},{"location":"wpf-for-data-driven-applications/","title":"WPF for data-driven applications?","text":"<p>The last couple of days, I was converting my add-in visual studio called Component Dropper to WPF. One thing I noticed, is that the text in my WPF application was blurry, certainly when the font is small. It is harder to read and very unpleasant to work with.</p> <p>After some research, it appears to be a known problem. Check out the following threads, How to turn off anti aliasing for small text? and Blurry text in WPF \u2013 current status? and a very good explanation about the problem.</p> <p>It\u2019s an issue that is already known for 2 years and there is still no solution for this particular problem. In my experience, enterprise applications are data-driven, which means there is a lot of text (= data) that need to be displayed typically in a grid (master-detail). WPF is really a great technology, but this is not a minor issue. I don\u2019t think that your customers will be happy if they receive a new application that is hard to read.</p>","tags":["wpf"]},{"location":"aop-in-action---dirty-tracking-using-mixins-with-castles-dynamicproxy/","title":"AOP in Action - Dirty Tracking using Mixins with Castle\u2019s DynamicProxy","text":"<p>In Part 1, we used the Unity block to intercept properties for dirty tracking. Our target class needed to implement the <code>IDirty</code> interface, and the setter properties (annotated with the Dirty attribute) assigned the Dirty flag (of <code>IDirty</code>) when the value has changed. Take for example the following classes:</p> <pre><code>[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]\npublic class DirtyAttribute : System.Attribute\n{\n}\n\npublic interface IDirty\n{\n    bool IsDirty { get; set; }\n}\n\npublic class Customer\n{\n    public virtual string FirstName { get; [Dirty] set; }\n    public virtual string LastName { get; [Dirty] set; }\n}\n</code></pre> <p>Note that in contrast to Part 1, the Customer object doesn\u2019t implement the <code>IDirty</code> interface. In this example we are going to use a mixin for dirty tracking, a mixin is a class that provides a certain functionality to be inherited by a subclass, but is not meant to stand alone. That\u2019s exactly what we want to achieve, that is to provide extra functionality, namely dirty tracking, to our Customer object.</p> <p>We simply have to implement the <code>IDirty</code> interface once and for all and call it for example <code>DirtyMixin</code>.</p> <pre><code>[Serializable]\npublic class DirtyMixin : IDirty\n{\n   public bool IsDirty { get; set; }\n}\n</code></pre> <p>As interception and mixin mechanism we use Castle\u2019s DynamicProxy, the latest build can be found here. To intercept our (dirty) properties we need to implement an interface called IInterceptor. In the implementation we write the code that need to be executed (advice) at particular points (pointcut) in the program. Note that with Unity we have the notion of IMatchingRule for defining Pointcuts, whereas in DynamicProxy we have to do it manually.</p> <pre><code>public class DirtyInterceptor : Castle.Core.Interceptor.IInterceptor\n{\n    public void Intercept(Castle.Core.Interceptor.IInvocation invocation)\n    {\n        if (PointCut(invocation.Proxy, invocation.Method))\n        {\n            Advise(invocation.Proxy, invocation.Method, invocation.GetArgumentValue(0));\n        }\n\n        invocation.Proceed();\n    }\n\n    bool PointCut(object target, MethodInfo methodInfo)\n    {\n        if (IsSetter(methodInfo) &amp;&amp; target is IDirty)\n        {\n            object[] dirtyAttributes = methodInfo.GetCustomAttributes(typeof(DirtyAttribute), true);\n            return (dirtyAttributes != null &amp;&amp; dirtyAttributes.Length &gt; 0);\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    void Advise(object target, MemberInfo methodInfo, object value)\n    {\n        string propertyName = methodInfo.Name.Substring(\"set_\".Length);\n        PropertyInfo info = target.GetType().GetProperty(propertyName);\n\n        if (info != null)\n        {\n            object oldValue = info.GetValue(target, null);\n\n            if (!IsEqual(value, oldValue))\n                ((IDirty)target).IsDirty = true;\n        }\n    }\n\n    bool IsSetter(MethodInfo methodInfo)\n    {\n        return (methodInfo.Name.StartsWith(\"set_\")) &amp;&amp; (methodInfo.GetParameters().Length == 1);\n    }\n\n    bool IsEqual(object valueX, object valueY)\n    {\n        if (valueX == null &amp;&amp; valueY != null)\n            return false;\n\n        if (valueX != null &amp;&amp; valueY == null)\n            return false;\n\n        if (valueX == null &amp;&amp; valueY == null)\n            return true;\n\n        return valueX.Equals(valueY);\n    }\n}\n</code></pre> <p>To generate our proxy we use the <code>ProxyGenerator</code> class that reside in the <code>Castle.DynamicProxy2</code> assembly. Adding a mixin is done through the <code>ProxyGenerationOptions</code> which is passed to the <code>CreateClassProxy</code> method.</p> <pre><code>var generator = new ProxyGenerator();\n\nProxyGenerationOptions options = new ProxyGenerationOptions();\noptions.AddMixinInstance(new DirtyMixin());\n\nCustomer customer = generator.CreateClassProxy(typeof(Customer), options, new DirtyInterceptor()) as Customer;\n\nvar firstname = customer.FirstName;\nDebug.Assert(!((IDirty)customer).IsDirty);\ncustomer.FirstName = \"Piet\";\nDebug.Assert(((IDirty)customer).IsDirty);\n</code></pre> <p>The customer object that we receive from the generator is a proxy through subclassing and you will see that it now implements the <code>IDirty</code> interface.</p> <p></p> <p>You can use the <code>PersistentProxyBuilder</code> to save the generated assembly. It renders an assembly called <code>CastleDynProxy2.dll</code>. Below you find an example how you can use <code>PersistentProxyBuilder</code>.</p> <pre><code>var generator = new ProxyGenerator(new PersistentProxyBuilder());\n\nProxyGenerationOptions options = new ProxyGenerationOptions();\noptions.AddMixinInstance(new DirtyMixin());\n\nCustomer customer = generator.CreateClassProxy(typeof(Customer), options, new DirtyInterceptor()) as Customer;\n\nstring proxyAssemblyPath = ((PersistentProxyBuilder)generator.ProxyBuilder).SaveAssembly();\n\nvar firstname = customer.FirstName;\nDebug.Assert(!((IDirty)customer).IsDirty);\ncustomer.FirstName = \"Piet\";\nDebug.Assert(((IDirty)customer).IsDirty);\n</code></pre> <p>You can go a bit further and use an extension method that enables you to ask for a certain service. Internally it will simply try to cast to the given interface.</p> <pre><code>public static class ObjectExtensions\n{\n    public static T GetService&lt;T&gt;(this object instance) where T : class\n    {\n        return instance as T;\n    }\n}\n</code></pre> <p>Given the <code>GetService</code> extension method, we use our customer as follow</p> <pre><code>IDirty dirty = customer.GetService&lt;IDirty&gt;();\nif (dirty != null)\n{\n    var firstname = customer.FirstName;\n    Debug.Assert(!dirty.IsDirty);\n    customer.FirstName = \"Piet\";\n    Debug.Assert(dirty.IsDirty);\n}\n</code></pre> <p>The source code of this article can be downloaded here</p>","tags":["patterns-practices"]},{"location":"intercepting-your-wcf-messages-in-silverlight-20/","title":"Intercepting your WCF messages in Silverlight 2.0","text":"<p>In many applications you want to intercept WCF messages for doing stuff like, logging, tracing, passing a user context, language identifier, etc. Typically this can be done through the IClientMessageInspector that resides in the System.ServiceModel.Dispatcher. Unfortunately this interface doesn\u2019t exist in Silverlight 2.0.</p> <p>Thankfully WCF is very extensible, and there is a sample Silverlight Web Services Samples on MSDN Code Gallery that shows how you can still use the IClientMessageInspector by implementing a custom binding. You simple use the <code>BasicHttpMessageInspectorBinding</code> that receives in the constructor an instance of type IClientMessageInspector. For example:</p> <pre><code>BasicHttpMessageInspectorBinding binding = new BasicHttpMessageInspectorBinding(new TraceInspector());\n</code></pre> <p>Note that the sample only allows you to pass one inspector, if you need to pass several inspectors you can use the decorator pattern to pass multiple.</p> <pre><code>public class ClientMessageInspectorDecorator : IClientMessageInspector\n{\n    IClientMessageInspector[] inspectors;\n\n    public ClientMessageInspectorDecorator(params IClientMessageInspector[] inspectors)\n    {\n        this.inspectors = inspectors;\n    }\n\n    public object BeforeSendRequest(ref Message request, IClientChannel channel)\n    {\n        foreach (var item in inspectors)\n        {\n            item.BeforeSendRequest(ref request, channel);\n        }\n\n        return null;\n    }\n\n    public void AfterReceiveReply(ref Message reply, object correlationState)\n    {\n        foreach (var item in inspectors)\n        {\n            item.AfterReceiveReply(ref reply, correlationState);\n        }\n    }\n}\n</code></pre>","tags":["silverlight"]},{"location":"customize-code-generation-in-net-ria-services/","title":"Customize code generation in .NET RIA Services","text":"<p>Quote</p> <p>Microsoft .NET\u00a0RIA\u00a0Services simplifies the traditional n-tier application pattern by bringing together the ASP.NET and Silverlight platforms.\u00a0RIA\u00a0Services provides a pattern to write application logic that runs on the mid-tier and controls access to data for queries, changes and custom operations. It also provides end-to-end support for common tasks such as data validation, authentication and roles by integrating with Silverlight components on the client and ASP.NET on the mid-tier.</p> <p>To get started with .NET RIA Services you need Visual Studio 2008 SP1 and you need to install the following packages</p> <ul> <li>Microsoft Silverlight 3 Tools Beta 1 for Visual Studio 2008 SP1</li> <li>Microsoft .NET RIA Services March '09 Preview</li> </ul> <p>On the download page of .NET RIA Services there is a great PDF document (riaservicesoverviewpreview.pdf) that gives you a step-by-step guide.</p> <p>Every time you compile a solution with .NET RIA Services, an MSBuild task is executed that generates code in your Silverlight project from the domain services (DomainService class) that reside in your ASP.NET server. After some investigation through reflector, you can actually modify or extend the code generation using CodeDom! For this you need to add an attribute called DomainIdentifier where you specify a type that inherits from CodeProcessor. Both classes reside in the <code>System.Web.Ria.Data namespace</code>.</p> <pre><code>[EnableClientAccess()]\n[DomainIdentifier(\"Comment\", CodeProcessor = typeof(CommentCodeProcessor))]\npublic class CityService : DomainService\n{\n   //...\n}\n</code></pre> <p>In this example, we simply add some documentation in the summary tag.</p> <pre><code>public class CommentCodeProcessor : CodeProcessor\n{\n    public CommentCodeProcessor(CodeDomProvider codeDomProvider)\n        : base(codeDomProvider)\n    {\n    }\n\n    public override void ProcessGeneratedCode(\n        DomainServiceDescription domainServiceDescription,\n        System.CodeDom.CodeCompileUnit codeCompileUnit,\n        IDictionary&lt;Type, System.CodeDom.CodeTypeDeclaration&gt; typeMapping)\n    {\n        Type domainServiceType = domainServiceDescription.DomainServiceType;\n        CodeTypeDeclaration declaration = typeMapping[domainServiceType];\n\n        declaration.Comments.Add(new CodeCommentStatement(\"&lt;summary&gt;\", true));\n\n        foreach (var entityType in domainServiceDescription.EntityTypes)\n        {\n            declaration.Comments.Add(\n                new CodeCommentStatement(\n                    string.Format(\"Entity Type: {0}\", entityType.FullName), true));\n        }\n\n        foreach (var operationEntry in domainServiceDescription.DomainOperationEntries)\n        {\n            declaration.Comments.Add(\n                new CodeCommentStatement(\n                    string.Format(\"Operation Entry: {0}\", operationEntry.MethodInfo.Name), true));\n        }\n\n        declaration.Comments.Add(new CodeCommentStatement(\"&lt;/summary&gt;\", true));\n    }\n}\n</code></pre> <p>Below you find a sample of the generated file using the <code>CommentCodeProcessor</code></p> <pre><code>/// &lt;summary&gt;\n/// Entity Type: SilverlightApplication.Web.DataModels.City\n/// Operation Entry: GetCities\n/// Operation Entry: ReturnAllCities\n/// &lt;/summary&gt;\n[DomainIdentifier(\"Comment\")]\npublic sealed partial class CityContext : DomainContext\n{\n   //...\n}\n</code></pre>","tags":["services"]},{"location":"enumerating-project-items-in-a-visual-studio-solution/","title":"Enumerating project items in a Visual Studio solution","text":"<p>Often you have the need to iterate through a collection and most of the time the iteration logic is weaved with the action that need to be done. This is because we are used to program in an imperative approach. In some scenarios it's better to use a functional approach and let other functions decide which action need to be applied. This way we can for example reuse our iteration logic.</p> <p>Below is an iterator that starts from a solution or project and iterates through all project items inside the solution. </p> <pre><code>public class ProjectItemIterator : IEnumerable&lt;EnvDTE.ProjectItem&gt;\n{\n    IEnumerable&lt;EnvDTE.Project&gt; projects;\n\n    public ProjectItemIterator(EnvDTE.Solution solution)\n    {\n        if (solution == null)\n            throw new ArgumentNullException(\"solution\");\n\n        projects = solution.Projects.Cast&lt;EnvDTE.Project&gt;();\n    }\n\n    public ProjectItemIterator(IEnumerable&lt;EnvDTE.Project&gt; projects)\n    {\n        if (projects == null)\n            throw new ArgumentNullException(\"projects\");\n\n        this.projects = projects;\n    }\n\n    public IEnumerator&lt;EnvDTE.ProjectItem&gt; GetEnumerator()\n    {\n        foreach (EnvDTE.Project currentProject in projects)\n            foreach (var currentProjectItem in Enumerate(currentProject.ProjectItems))\n                yield return currentProjectItem;\n    }\n\n    IEnumerable&lt;EnvDTE.ProjectItem&gt; Enumerate(EnvDTE.ProjectItems projectItems)\n    {\n        foreach (EnvDTE.ProjectItem item in projectItems)\n        {\n            yield return item;\n\n            if (item.SubProject != null)\n            {\n                foreach (EnvDTE.ProjectItem childItem in Enumerate(item.SubProject.ProjectItems))\n                    yield return childItem;\n            }\n            else\n            {\n                foreach (EnvDTE.ProjectItem childItem in Enumerate(item.ProjectItems))\n                    yield return childItem;\n            }\n        }\n    }\n\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n}\n</code></pre>","tags":["visual-studio"]},{"location":"code-coverage-with-visual-studio/","title":"Code coverage with Visual Studio","text":"<p>Code coverage is used to determine how effectively your tests exercise the code in your application. This way you can identify sections of code that are covered, not covered or partially covered by your tests.</p> <p>Visual Studio uses 2 different types of analysis, block-based statement coverage (C1 coverage) and line-based coverage.</p> <ul> <li> <p>Block-based statement coverage</p> <p>A block is defined as a sequence of instructions that have a single entry point and a single exit point. Exit points include branch instructions, a function call, a return instruction, or, for managed code, a throw instruction.</p> </li> <li> <p>Line-based coverage</p> <p>For line-based coverage, the tools identify all of the blocks that make up a line and then use this information to determine the level of coverage for the line. If all of the blocks that make up the line are covered, then the tools report that the line is covered. If no blocks in the line are covered, then the tools report that the line is not covered. If some, but not all, of the blocks in the line are covered, then the tools report that the line is partially covered.</p> </li> </ul> <p>Take for example the following class that reside in MyProject.BusinessLogic assembly</p> <pre><code>public class Foo\n{\n   public int Calculate(int x, int y)\n   {\n      if (x &gt; 0 &amp;&amp; y &lt; 0)\n      {\n         return -1;\n      }\n      else\n      {\n         return 1;\n      }\n   }\n}\n</code></pre> <p>And a unit test that reside in MyProject.BusinessLogic.Test assembly</p> <pre><code>[TestClass]\npublic class FooTest\n{\n   [TestMethod]\n   public void Calculate()\n   {\n      Foo foo = new Foo();\n      Assert.AreEqual(1, foo.Calculate(3, 4));\n   }\n}\n</code></pre> <p>To enable code coverage you need to double-lick on the LocalTestRun.testrunconfig file that is located in the 'Solution Items' folder.</p> <p></p> <p>Inside the 'Code Coverage' tab you select the assembly that you want to instrument. In this case we select MyProject.BusinessLogic.dll assembly.</p> <p></p> <p>Now you will need to run your unit tests again. Note that code coverage doesn't work when you debug your unit tests, so you will need to run your unit tests through the menu 'Test \u2013&gt; Run \u2013&gt; All Tests in Solution (CTRL+R, A)'. After that you can view a report about the code coverage results through the menu 'Test \u2013&gt; Windows \u2013&gt; Code Coverage Results'.</p> <p></p> <p>From the results we notice that we don't have 100% code coverage because our unit test only reached one part of the condition inside the Calculate method. If you open the Foo class and enable the code coloring you see the parts that are covered, not covered or partially covered.</p> <p></p> <ul> <li>Light Blue: Indicates that the entire line of code was exercised in the test run.</li> <li>Beige: Indicates that only a portion of the code blocks within the line of code were exercised in the test run.</li> <li>Reddish Brown: Indicates that the line was not exercised in the test run.</li> </ul> <p>Code coverage inside Visual Studio uses statement coverage and in this case the number of IL instructions reached is taken into account. If we add some statements in the Foo class and run again our code coverage we notice that the coverage has been raised form 71,43% to 92,59%. It's important to notice, that when you refactor your class it influences the code coverage even when the contract of the class is the same! This is very different from Branch coverage where each control structure is evaluated to true and false. In this case we would have 50% code coverage.</p> <pre><code>public class Foo\n{\n   public int Calculate(int x, int y)\n   {\n      if (x &gt; 0 &amp;&amp; y &lt; 0)\n      {\n         return -1;\n      }\n      else\n      {\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n         Console.WriteLine(x.ToString());\n\n         return 1;\n      }\n   }\n}\n</code></pre>","tags":["testing","visual-studio"]},{"location":"create-a-net-windows-service-in-5-steps-with-topshelf/","title":"Create a .NET Windows Service in 5 steps with Topshelf","text":"<p>Topshelf is an open-source hosting framework for building Windows Services using .NET.\u00a0With Topshelf you can create in a few lines of code your own windows service. It's a kind of internal\u00a0DSL for building windows services.\u00a0I used version 2.2 of Topshelf and the binaries and sources can be found here (GitHub).</p> <p>First download Topshelf from GitHub, I used version 2.2 (direct link).</p> <ol> <li>Create a console application named <code>SampleWindowsService</code> inside Visual Studio - Be sure to change the target framework to .NET Framework 4</li> <li>Reference the binaries <code>TopShelf.dll</code> and <code>log4net.dll</code> (included in Topshelf).</li> <li> <p>Create a simple service called 'SampleService' that simply write every 5 seconds to the log. Note that we create explicit a <code>Start</code> and <code>Stop</code> method which is conceptually the minimum that a windows service need.</p> <pre><code>public class SampleService\n{\n    private Timer _timer = null;\n    readonly ILog _log = LogManager.GetLogger(\n                                    typeof(SampleService));\n\n    public SampleService()\n    {\n        double interval = 5000;\n        _timer = new Timer(interval);\n        _timer.Elapsed += new ElapsedEventHandler(OnTick);\n    }\n\n    protected virtual void OnTick(object sender, ElapsedEventArgs e)\n    {\n        _log.Debug(\"Tick:\" + DateTime.Now.ToLongTimeString());\n    }\n\n    public void Start()\n    {\n        _log.Info(\"SampleService is Started\");\n\n        _timer.AutoReset = true;\n        _timer.Enabled = true;\n        _timer.Start();\n    }\n\n    public void Stop()\n    {\n        _log.Info(\"SampleService is Stopped\");\n\n        _timer.AutoReset = false;\n        _timer.Enabled = false;\n    }\n}\n</code></pre> </li> <li> <p>In the main method of our console application we will use Topshelf to host our SampleService. We we are telling Topshelf how to start and stop the service, what the service name is, etc. Note that we need to configure log4net for Topshelf and our service!</p> <pre><code>static void Main(string[] args)\n{\n    XmlConfigurator.ConfigureAndWatch(\n        new FileInfo(\".\\log4net.config\"));\n\n    var host = HostFactory.New(x =&gt;\n    {\n        x.EnableDashboard();\n        x.Service(s =&gt;\n        {\n            s.SetServiceName(\"SampleService\");\n            s.ConstructUsing(name =&gt; new SampleService());\n            s.WhenStarted(tc =&gt;\n            {\n                XmlConfigurator.ConfigureAndWatch(\n                    new FileInfo(\".\\log4net.config\"));\n                tc.Start();\n            });\n            s.WhenStopped(tc =&gt; tc.Stop());\n        });\n\n        x.RunAsLocalSystem();\n        x.SetDescription(\"SampleService Description\");\n        x.SetDisplayName(\"SampleService\");\n        x.SetServiceName(\"SampleService\");\n    });\n\n    host.Run();\n}\n</code></pre> </li> <li> <p>The only thing we have to do now is to configure log4net. Create a file called <code>log4net.config</code> with the following configuration.</p> log4net.config<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;log4net&gt;\n  &lt;appender name=\"main\" type=\"log4net.Appender.ConsoleAppender\"&gt;\n    &lt;layout type=\"log4net.Layout.PatternLayout\"&gt;\n      &lt;conversionPattern value=\"%-5level - %message%newline\" /&gt;\n    &lt;/layout&gt;\n  &lt;/appender&gt;\n  &lt;appender name=\"udp\" type=\"log4net.Appender.UdpAppender\"&gt;\n    &lt;RemoteAddress value=\"log4view-local\"/&gt;\n    &lt;RemotePort value=\"7071\"/&gt;\n    &lt;layout type=\"log4net.Layout.XmlLayoutSchemaLog4j\"/&gt;\n  &lt;/appender&gt;\n  &lt;root&gt;\n    &lt;level value=\"DEBUG\" /&gt;\n    &lt;appender-ref ref=\"main\" /&gt;\n    &lt;appender-ref ref=\"udp\" /&gt;\n  &lt;/root&gt;\n&lt;/log4net&gt;\n</code></pre> <p>This configuration enables to output to the console and through a UDP network protocol so that we can easily monitor the log statements when installed as a windows service. I used Log2Console (Codeplex) to monitor my log statements through UDP. </p> <p>Note</p> <p>Make sure the output directory of <code>log4net.config</code> is set to <code>Copy always</code></p> <p>Note</p> <p>Note that there is an issue with log4net related to IPv6 and Windows Vista/7. You can fix it by adding the following <code>127.0.0.1 log4view-local</code> to your hosts file which can be found in folder <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>.</p> </li> </ol> <p>When you fit F5 you will see that Topshelf outputs some log statements and you will see that the log statements of our SampleService is included and everything is working properly.</p> <p></p> <p>In order to install SampleService as a Windows Service you simply need to do the following through the command prompt.</p> <p>Warning</p> <p>Be sure to launch the command prompt as an administrator!</p> <pre><code>SampleWindowsService.exe install\n</code></pre> <p>After that when the windows service has been installed successfully we can start the service through services.msc or simply by typing</p> <pre><code>SampleWindowsService.exe start\n</code></pre> <p>Now we can open Log2Console to monitor our log files that is send through the UDP appender.</p> <p> To uninstall the service we simply write</p> <pre><code>SampleWindowsService.exe uninstall\n</code></pre> <p>The sources can be found here (BitBucket)</p>","tags":["services"]},{"location":"archimate---architecture-modeling-language-and-tool/","title":"ArchiMate - Architecture modeling language and tool","text":"<p>ArchiMate is an open and independent Enterprise Architecture modeling language that supports the description, analysis and visualization of architecture within and across business domains. ArchiMate is one of the open standards hosted by The Open Group and is based on the IEEE 1471 standard.</p> <p>The goals of ArchiMate are</p> <ul> <li>To describe architectures and their relations</li> <li>Communicate enterprise architectures with all stakeholders</li> <li>Judge the impact of changes</li> <li>Realise architecture by relating to existing standards, techniques and tools</li> </ul> <p>Archi is a free open source java application to create ArchiMate models.</p> <p></p> <p>You can also find a quick reference card of Archimate\u00a0here and you can also download Archimate stencils for Visio.</p>","tags":["architecture","modeling","tools"]},{"location":"introducing-neo4jconnect/","title":"Introducing Neo4jConnect","text":"<p>I started with an open-source project called Neo4jConnect that enables you to connect to Neo4j, which is a graph-database written in Java and accessible through the REST api. On this page you can find the several operations exposed by Neo4j through REST. Neo4jConnect exposes an object api to manipulate the graph database.</p> <p>More information and a quickstart can be found on the project site.</p> <p>In the next couple of weeks I will add more documentation and features!</p>","tags":["neo4j"]},{"location":"windows-live-writer-2011-tips/","title":"Windows Live Writer 2011 Tips","text":"<p>Windows Live Writer (WLW) is a great tool that enables you to edit and publish your blog posts. Below you find some tips about WLW.</p>","tags":["utils-tools","windows-live"]},{"location":"windows-live-writer-2011-tips/#make-wlw-portable","title":"Make WLW portable","text":"<p>I love portable applications, it enables you to store them on a USB drive or in the cloud without losing your settings and data. It turns out that it\u2019s pretty easy to make WLW portable, and thankfully the investigation I did 3 years ago is still valid for version 2011!</p> <p>The steps are very simple</p> <ol> <li>Copy all the contents of your installation folder (<code>C:\\Program Files (x86)\\Windows LiveWriter</code>) to your destination folder (e.g. USB stick)</li> <li>Create a folder called <code>UserData</code> in your destination folder (same level with the folders <code>Dictionaries</code>, <code>Plugins</code>, \u2026)</li> </ol> <p>You will see after launching WLW and configuring your blog site it will create all necessary files and folders for you settings and posts inside the <code>UserData</code> folder!</p> <p></p>","tags":["utils-tools","windows-live"]},{"location":"windows-live-writer-2011-tips/#edit-existing-posts","title":"Edit existing posts","text":"<p>With WLW it\u2019s possible to edit existing posts (that originally were not posted with WLW) on your blog. It\u2019s not directly clear from the user interface how to do that!</p> <p>Click on the app menu in the ribbon bar en click on Open recent post, not the items that appear on the right!</p> <p></p> <p>After that you get a dialog where you can choose your blog site on the right. It retrieves all post items of your blog and you simply pick the one that you want to edit!</p> <p></p>","tags":["utils-tools","windows-live"]},{"location":"windows-live-writer-2011-tips/#use-dropbox-to-sync-your-local-drafts-across-computers","title":"Use DropBox to sync your local drafts across computers","text":"<p>I use DropBox a lot, it\u2019s a free hosting service that enables you to store and share files and folders across the internet. I use it to share my portable utilities and tools, and also WLW (after making it portable). This way I can always access my drafts and edit them when and where I want!</p>","tags":["utils-tools","windows-live"]},{"location":"0xc0000225-error-when-installing-win2008r2x64-on-virtualbox/","title":"0xc0000225 error when installing Win2008R2x64 on VirtualBox","text":"<p>When trying to setup and install Windows Server 2008 R2 x64 on VirtualBox you may encounter the following error</p> <p></p> <p>It turns out you need to enable the IO APIC\u00a0setting, like below</p> <p></p>"},{"location":"roslyn---formatting-code/","title":"Roslyn - Formatting Code","text":"<p>Roslyn CTP is the implementation of a 'compiler-as-a-service' for C# and VB.Net. Generally compilers are black boxes, the Roslyn project changes that by opening up APIs that you can use for code related tasks in your tools and applications.</p> <p>In this post we are investigating source code formatting. Inside my projects I use as much as possible code generation and whether it is coming from T4 templates or some other mechanism, there is usually the need to format your code in a consistent way.</p> <p>Inside Roslyn we can use the SyntaxTree class that resides in the <code>Roslyn.Compilers.CSharp</code> namespace to parse a text file (that contains C# of VB code). And after we can use the <code>Format</code> extension method that resides in the\u00a0<code>CompilationUnitSyntax</code> class to reformat your code.</p> <pre><code>var code = File.ReadAllText(\"Sample.cs\");\nvar tree = SyntaxTree.ParseCompilationUnit(code);\nvar root = (CompilationUnitSyntax)tree.Root;\nvar formattedCode = root.Format().GetFullText();\n</code></pre> <p>Take for example the code fragment below which is totally unformatted.</p> sample.cs<pre><code>namespace Domain\n{\nusing System;\nusing System\n.Collections\n.Generic;\nusing System.ComponentModel.DataAnnotations;\n\npublic class BankAccount\n:Entity,\nIValidatableObject\n{\npublic BankAccountNumber BankAccountNumber {\nget;\nset; }\n\npublic string Iban\n{\nget\n{\nreturn string\n.Format(\"ES{0} {1} {2} {0}{3}\",\nthis.BankAccountNumber.CheckDigits,\nthis.BankAccountNumber\n.NationalBankCode,\nthis.BankAccountNumber\n.OfficeNumber,\nthis.BankAccountNumber\n.AccountNumber);\n}\nset {\n\n}\n}\n\npublic decimal Balance { get;\nprivate set; }\n\npublic virtual ICollection\nBankAccountActivity\n{\nget\n{\nif (_bankAccountActivity\n== null)\n_bankAccountActivity =\nnew HashSet();\n\nreturn _bankAccountActivity;\n}\nset\n{\n_bankAccountActivity =\nnew HashSet(value);\n}\n}\n}\n}\n</code></pre> <p>When passing the code fragment through the <code>SyntaxTree</code> and calling the <code>Format</code> extension method you get the following result which is formatted correctly. </p> <pre><code>namespace Domain\n{\n   using System;\n   using System.Collections.Generic;\n   using System.ComponentModel.DataAnnotations;\n\n   public class BankAccount : Entity, IValidatableObject\n   {\n      public BankAccountNumber BankAccountNumber\n      {   \n         get;\n         set;\n      }\n\n      public string Iban\n      {\n         get\n         {\n            return string.Format(\"ES{0} {1} {2} {0}{3}\", this.BankAccountNumber.CheckDigits, this.BankAccountNumber.NationalBankCode, this.BankAccountNumber.OfficeNumber, this.BankAccountNumber.AccountNumber);\n         }\n         set\n         {\n         }\n      }\n\n      public decimal Balance\n      {\n         get;\n         private set;\n      }\n\n      public virtual ICollection BankAccountActivity\n      {\n         get\n         {\n            if (_bankAccountActivity == null)\n               _bankAccountActivity = new HashSet();\n            return _bankAccountActivity;\n         }\n         set\n         {\n            _bankAccountActivity = new HashSet(value);\n         }\n     }   \n   }\n}\n</code></pre> <p>Note that when you are using for example lambda expressions or delegates that the formatter will add unnecessary newlines and whitespaces.\u00a0Take for example the following code fragment after calling the <code>Format</code> method.</p> <pre><code>public void SomeMethod()\n{\n   this.Click += (s, e) =&gt;\n   {\n      MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n   }\n   ;\n   treeView.AfterExpand += new TreeViewEventHandler(delegate (object o, TreeViewEventArgs t)\n   {\n      t.Node.ImageIndex = (int)FolderIconEnum.open;\n      t.Node.SelectedImageIndex = (int)FolderIconEnum.open;\n   }\n);\n}\n</code></pre> <p>Thankfully we have everything in control through the APIs and we can rewrite the expression (like the Format extension method is doing).</p> <p>For that we need to create a class inheriting from SyntaxRewriter that resides in the <code>Roslyn.Compilers.CSharp</code> namespace and implements the Visitor pattern.</p> <pre><code>public class CodeBeautifier: SyntaxRewriter\n{\n   protected override SyntaxToken VisitToken(SyntaxToken token)\n   {\n      switch (token.Kind)\n      {\n         case SyntaxKind.SemicolonToken:\n\n         if (token.GetPreviousToken().Kind == SyntaxKind.CloseBraceToken ||\n            token.GetPreviousToken().Kind == SyntaxKind.CloseParenToken)\n         {\n            return token\n            .WithLeadingTrivia()\n            .WithTrailingTrivia(Syntax.ElasticCarriageReturnLineFeed);\n         }\n\n         break;\n\n      case SyntaxKind.CloseBraceToken:\n\n         if (token.GetNextToken().Kind == SyntaxKind.CloseParenToken ||\n            token.GetNextToken().Kind == SyntaxKind.SemicolonToken)\n         {\n             return token\n             .WithTrailingTrivia();\n         }\n\n      break;\n\n      case SyntaxKind.CloseParenToken:\n\n         if (token.GetPreviousToken().Kind == SyntaxKind.CloseBraceToken)\n         {\n            return token\n            .WithLeadingTrivia();\n         }\n\n      break;\n   }\n\n    return token;\n}\n</code></pre> <p>Note that I am visiting the syntax tokens, these are the terminals of the language grammar (representing the smallest syntactic fragments) and investigating the current kind of token with the next or previous kind of token. Syntax Trivia represents the parts such as whitespace, comments and preprocessor directives. Inside the <code>VisitToken</code> method I am replacing the syntax trivia parts.</p> <p>To use the <code>CodeBeautifier</code> class you need to simply create an instance of it and using the <code>Visit</code> method to pass your node.</p> <pre><code>var code = File.ReadAllText(\"Sample.cs\");\nvar tree = SyntaxTree.ParseCompilationUnit(code);\nvar root = (CompilationUnitSyntax)tree.Root;\nvar formattedCode = new CodeBeautifier().Visit(root.Format()).GetFullText();\n</code></pre> <p>After the syntax rewriting you will see that the code now looks like below</p> <pre><code>public void SomeMethod()\n{\nthis.Click += (s, e) =&gt;\n{\nMessageBox.Show(((MouseEventArgs)e).Location.ToString());\n};\ntreeView.AfterExpand += new TreeViewEventHandler(delegate (object o, TreeViewEventArgs t)\n{\nt.Node.ImageIndex = (int)FolderIconEnum.open;\nt.Node.SelectedImageIndex = (int)FolderIconEnum.open;\n});\n}\n</code></pre>","tags":["code-generation","roslyn"]},{"location":"building-the-source-code-of-aspnet-web-api/","title":"Building the source code of ASP.NET (Web API)","text":"<p>There is a lot of activity in the source code of ASP.NET on CodePlex. Because of some bug that has been fixed, I wanted to try out the latest build.</p> <p>Simply download the latest source code from CodePlex (I used changed set 88372a0b4ab9). Like it is mentioned on CodePlex you have to obtain the NuGet Packages first and after that you can build. </p> <pre><code>build RestorePackages\nbuild\n</code></pre> <p>To test some things out I created a simple console application (inside the same solution) and added the following references with the following code</p> <ul> <li>System.Net.Http</li> <li>System.Web.Http</li> <li>System.Web.Http.SelfHost</li> </ul> <pre><code>static void Main(string[] args)\n{\n   var baseAddress = \"http://localhost:7777/\";\n   var config = new HttpSelfHostConfiguration(baseAddress);\n   config.Routes.MapHttpRoute(\n      name: \"DefaultApi\",\n      routeTemplate: \"api/{controller}/{id}\",\n      defaults: new\n      {\n         id = RouteParameter.Optional\n      });\n\n   var server = new HttpSelfHostServer(config);\n   server.OpenAsync().Wait();\n   Console.WriteLine(\"The server is running...\");\n}\n</code></pre> <p>When you have installed ASP.NET MVC4 Beta you will get the following error</p> <p>Could not load type 'System.Web.Http.RouteParameter' from assembly 'System.Web.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.</p> <p>Because the signed assembly has the same version it will always load the one that reside in the GAC. There are breaking changes in the new version and it clearly doesn't load the latest 'System.Web.Http' assembly within the solution! This can be seen and monitored by using Fuslogvw.</p> <p>To resolve this problem we can use DEVPATH. It's an environment variable that you can set to a folder (typically you're output folder). The runtime will use the DEVPATH folder for probing before looking into the GAC! After setting the DEVPATH environment variable (I had to restart my Visual Studio to take effect) you have to add the following in the config file and after that everything worked fine. </p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;configuration&gt;\n  &lt;runtime&gt;\n    &lt;developmentMode developerInstallation=\"true\"/&gt;\n  &lt;/runtime&gt;\n&lt;/configuration&gt;\n</code></pre>","tags":["asp-net","asp-net-web-api"]},{"location":"linq-to-serilog/","title":"Linq to Serilog","text":"<p>Serilog\u00a0is a logging framework that enables structured logging. More information on how it can be used and configured can be found here. Note that for the following snippets\u00a0you need Serilog 1.3 or greater.</p> <p>Take for example the following code snippet (taken from the sample) where we changed the configuration to write to a json as well.</p> <pre><code>using Serilog;\nusing Serilog.Enrichers;\nusing Serilog.Formatting.Json;\nusing Serilog.Sinks.IOFile;\nusing System;\n\nnamespace Sample\n{\n    class Program\n    {\n        static void Main()\n        {\n            Log.Logger = new LoggerConfiguration()\n              .MinimumLevel.Debug()\n              .WriteTo.File(@\"log.txt\")\n              .WriteTo.Sink(new FileSink(@\"log.json\", new JsonFormatter(false, null, true), null))\n              .WriteTo.Console()\n              .Enrich.WithProperty(\"App\", \"Test Harness\")\n              .Enrich.With(new ThreadIdEnricher(),\n                          new MachineNameEnricher())\n              .CreateLogger();\n\n            Log.Information(\"Just biting {Fruit} number {Count}\", \"Apple\", 12);\n            Log.ForContext&lt;Program&gt;().Information(\"Just biting {Fruit} number {Count:0000}\", \"Apple\", 12);\n\n            Log.Information(\"I've eaten {Dinner}\", new[] { \"potatoes\", \"peas\" });\n\n            Log.Information(\"I sat at {@Chair}\", new { Back = \"straight\", Legs = new[] { 1, 2, 3, 4 } });\n            Log.Information(\"I sat at {Chair}\", new { Back = \"straight\", Legs = new[] { 1, 2, 3, 4 } });\n\n            var context = Log.Logger.ForContext(\"MessageId\", 567);\n            try\n            {\n              context.Information(\"Processing a message\");\n              throw new NotImplementedException(\"Nothing doing.\");\n            }\n            catch (Exception ex)\n            {\n              context.Error(ex, \"Rolling back transaction!\");\n            }\n\n            Console.ReadKey(true);\n        }\n    }\n}\n</code></pre> <p>Below is the result of the generated text file (log.txt),</p> log.txt<pre><code>2014-05-09 20:01:43.920 +02:00 [Information] Just biting \"Apple\" number 12\n2014-05-09 20:01:43.937 +02:00 [Information] Just biting \"Apple\" number 0012\n2014-05-09 20:01:43.938 +02:00 [Information] I've eaten [\"potatoes\", \"peas\"]\n2014-05-09 20:01:43.951 +02:00 [Information] I sat at { Back: \"straight\", Legs: [1, 2, 3, 4] }\n2014-05-09 20:01:43.954 +02:00 [Information] I sat at \"{ Back = straight, Legs = System.Int32[] }\"\n2014-05-09 20:01:43.954 +02:00 [Information] Processing a message\n2014-05-09 20:01:43.954 +02:00 [Error] Rolling back transaction!\nSystem.NotImplementedException: Nothing doing.\n   at SerilogSample.Program.Main() in c:SerilogSampleSerilogSampleProgram.cs:line 35\n</code></pre> <p>but it becomes more interesting if we look at the json file (log.json) that has been generated.</p> <pre><code>{\"Timestamp\":\"2014-05-09T20:01:43.9200064+02:00\",\"Level\":\"Information\",\"MessageTemplate\":\"Just biting {Fruit} number {Count}\",\"RenderedMessage\":\"Just biting \"Apple\" number 12\",\"Properties\":{\"Fruit\":\"Apple\",\"Count\":12,\"App\":\"Test Harness\",\"ThreadId\":1,\"MachineName\":\"MyMachine\"}}\n{\"Timestamp\":\"2014-05-09T20:01:43.9370156+02:00\",\"Level\":\"Information\",\"MessageTemplate\":\"Just biting {Fruit} number {Count:0000}\",\"RenderedMessage\":\"Just biting \"Apple\" number 0012\",\"Properties\":{\"Fruit\":\"Apple\",\"Count\":12,\"SourceContext\":\"SerilogSample.Program\",\"App\":\"Test Harness\",\"ThreadId\":1,\"MachineName\":\"MyMachine\"}}\n{\"Timestamp\":\"2014-05-09T20:01:43.9380179+02:00\",\"Level\":\"Information\",\"MessageTemplate\":\"I've eaten {Dinner}\",\"RenderedMessage\":\"I've eaten [\"potatoes\", \"peas\"]\",\"Properties\":{\"Dinner\":[\"potatoes\",\"peas\"],\"App\":\"Test Harness\",\"ThreadId\":1,\"MachineName\":\"MyMachine\"}}\n{\"Timestamp\":\"2014-05-09T20:01:43.9510191+02:00\",\"Level\":\"Information\",\"MessageTemplate\":\"I sat at {@Chair}\",\"RenderedMessage\":\"I sat at { Back: \"straight\", Legs: [1, 2, 3, 4] }\",\"Properties\":{\"Chair\":{\"Back\":\"straight\",\"Legs\":[1,2,3,4]},\"App\":\"Test Harness\",\"ThreadId\":1,\"MachineName\":\"MyMachine\"}}\n{\"Timestamp\":\"2014-05-09T20:01:43.9540137+02:00\",\"Level\":\"Information\",\"MessageTemplate\":\"I sat at {Chair}\",\"RenderedMessage\":\"I sat at \"{ Back = straight, Legs = System.Int32[] }\"\",\"Properties\":{\"Chair\":\"{ Back = straight, Legs = System.Int32[] }\",\"App\":\"Test Harness\",\"ThreadId\":1,\"MachineName\":\"MyMachine\"}}\n{\"Timestamp\":\"2014-05-09T20:01:43.9549787+02:00\",\"Level\":\"Information\",\"MessageTemplate\":\"Processing a message\",\"RenderedMessage\":\"Processing a message\",\"Properties\":{\"MessageId\":567,\"App\":\"Test Harness\",\"ThreadId\":1,\"MachineName\":\"MyMachine\"}}\n{\"Timestamp\":\"2014-05-09T20:01:43.9549787+02:00\",\"Level\":\"Error\",\"MessageTemplate\":\"Rolling back transaction!\",\"RenderedMessage\":\"Rolling back transaction!\",\"Exception\":\"System.NotImplementedException: Nothing doing.rn   at SerilogSample.Program.Main() in c:\\SerilogSample\\SerilogSample\\Program.cs:line 35\",\"Properties\":{\"MessageId\":567,\"App\":\"Test Harness\",\"ThreadId\":1,\"MachineName\":\"MyMachine\"}}\n</code></pre> <p>Each log event is persisted as a json object and separated by a newline. If we look more closely to one of the events you see that we have a Properties collection that contains the Enrich values and the values passed through the property values collection.</p> <pre><code>{\n  \"Timestamp\": \"2014-05-09T20:01:43.9510191+02:00\",\n  \"Level\": \"Information\",\n  \"MessageTemplate\": \"I sat at {@Chair}\",\n  \"RenderedMessage\": \"I sat at { Back: \"straight\", Legs: [1, 2, 3, 4] }\",\n  \"Properties\": {\n    \"Chair\": {\n      \"Back\": \"straight\",\n      \"Legs\": [\n        1,\n        2,\n        3,\n        4\n      ]\n    },\n    \"ThreadId\": 1,\n    \"MachineName\": \"MyMachine\"\n  }\n}\n</code></pre> <p>With\u00a0Json.NET\u00a0we can deserialize the log file so that we can use LINQ to query our log events. We have LogEventLevel and LogEvent that represent our log item.</p> <pre><code>public enum LogEventLevel\n{\n    Verbose,\n    Debug,\n    Information,\n    Warning,\n    Error,\n    Fatal\n}\n\npublic class LogEvent\n{\n    public DateTimeOffset Timestamp { get; set; }\n    public LogEventLevel Level { get; set; }\n    public string MessageTemplate { get; set; }\n    public string RenderedMessage { get; set; }\n    public string Exception { get; set; }\n    public Dictionary&lt;string, JToken&gt; Properties { get; set; }\n}\n</code></pre> <p>Note that the generated json file is not valid and that we need to separate each log event with a comma and make an array of it. Below you have a util class that will do all the plumbing and note that\u00a0we are using FileStream so that it can also be read even when the file is in use.</p> <pre><code>public class SerilogUtils\n{\n    public static IEnumerable Load(string jsonPath)\n    {\n        var json = string.Empty;\n\n        using (var fs = new FileStream(jsonPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))\n        using (var sr = new StreamReader(fs, Encoding.Default))\n        {\n            json = sr.ReadToEnd();\n        }\n\n        if (string.IsNullOrEmpty(json))\n            return Enumerable.Empty();\n\n        json = json.Replace(Environment.NewLine, \",\");\n        json = \"[\" + json + \"]\";\n\n        var logEvents = JsonConvert.DeserializeObject&lt;List&gt;(json);\n        return logEvents;\n    }\n}\n</code></pre> <p>LINQPad is a great tool to play with LINQ queries. Just make a reference to Json.NET\u00a0and use the following using statements inside LINQPAD and after that you can do all sort of reports about you're log events.</p> <ul> <li>Newtonsoft.Json</li> <li>Newtonsoft.Json.Linq</li> <li>System.Linq</li> </ul> <p></p> <p>Below are some query examples</p> <pre><code>logEvents = logEvents.Where(x =&gt; x.Level == LogEventLevel.Information);\nlogEvents = logEvents.Where(x =&gt; (int)x.Properties[\"ThreadId\"] == 1);\nlogEvents = logEvents.Where(x =&gt; !string.IsNullOrEmpty(x.Exception));\n\nvar result = logEvents\n    .Where(x =&gt; x.Properties.ContainsKey(\"MessageId\"))\n    .GroupBy(x =&gt; (int)x.Properties[\"MessageId\"]);\n</code></pre> <p>In the next blog post we will go a little further and see how we can customize the layout and use json path expressions.</p>"},{"location":"archive/2014/","title":"2014","text":""},{"location":"archive/2012/","title":"2012","text":""},{"location":"archive/2011/","title":"2011","text":""},{"location":"archive/2009/","title":"2009","text":""},{"location":"archive/2008/","title":"2008","text":""},{"location":"archive/2007/","title":"2007","text":""},{"location":"archive/2006/","title":"2006","text":""},{"location":"archive/2005/","title":"2005","text":""},{"location":"archive/2004/","title":"2004","text":""},{"location":"page/2/","title":"Home","text":""},{"location":"page/3/","title":"Home","text":""},{"location":"page/4/","title":"Home","text":""},{"location":"page/5/","title":"Home","text":""},{"location":"page/6/","title":"Home","text":""},{"location":"page/7/","title":"Home","text":""},{"location":"page/8/","title":"Home","text":""},{"location":"page/9/","title":"Home","text":""},{"location":"page/10/","title":"Home","text":""},{"location":"page/11/","title":"Home","text":""},{"location":"page/12/","title":"Home","text":""},{"location":"page/13/","title":"Home","text":""},{"location":"archive/2008/page/2/","title":"2008","text":""},{"location":"archive/2007/page/2/","title":"2007","text":""},{"location":"archive/2006/page/2/","title":"2006","text":""},{"location":"archive/2006/page/3/","title":"2006","text":""},{"location":"archive/2006/page/4/","title":"2006","text":""},{"location":"archive/2006/page/5/","title":"2006","text":""},{"location":"archive/2005/page/2/","title":"2005","text":""},{"location":"archive/2005/page/3/","title":"2005","text":""},{"location":"archive/2004/page/2/","title":"2004","text":""}]}